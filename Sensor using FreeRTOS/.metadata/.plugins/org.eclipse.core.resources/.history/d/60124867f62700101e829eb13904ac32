/*
 * dht22-driver.c
 *
 *  Created on: May 3, 2025
 *      Author: sandeep
 */

#include "stm32f103xb.h"
#include "dht22-driver.h"
#include "uart-driver.h"

#define DHT22_PORT GPIOA
#define DHT22_PIN  0
#define DHT22_PIN_MASK (1U << DHT22_PIN)

static void set_pin_output(void) {
    DHT22_PORT->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
    DHT22_PORT->CRL |= GPIO_CRL_MODE0_1;      // Output mode 2 MHz
    DHT22_PORT->CRL |= GPIO_CRL_CNF0_0;       // Open-drain output
}

static void set_pin_input(void) {
    DHT22_PORT->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
    DHT22_PORT->CRL |= GPIO_CRL_CNF0_1;       // Input with pull-up/down
}

static void delay_us(volatile uint32_t us) {
    while(us--) {
        for (volatile int i = 0; i < 8; i++) __asm__("NOP");
    }
}

uint8_t DHT22_Read(uint8_t* temperature, uint8_t* humidity) {
    uint8_t bits[5] = {0};

    // Start signal
    set_pin_output();
    DHT22_PORT->ODR &= ~DHT22_PIN_MASK;
    delay_us(20000); // 20ms LOW
    DHT22_PORT->ODR |= DHT22_PIN_MASK;
    delay_us(30); // Pull HIGH for 20-40us
    set_pin_input(); // Let sensor take control

    // Wait for sensor response: ~80us LOW then ~80us HIGH
    uint32_t timeout = 1000;
    while ((DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1); // Wait LOW
    if (timeout == 0) {
        UART1_SendString("Timeout waiting for sensor LOW\r\n");
        return 0;
    }

    timeout = 1000;
    while (!(DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1); // Wait HIGH
    if (timeout == 0) {
        UART1_SendString("Timeout waiting for sensor HIGH\r\n");
        return 0;
    }

    timeout = 1000;
    while ((DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1); // Wait LOW before data
    if (timeout == 0) {
        UART1_SendString("Timeout before data start\r\n");
        return 0;
    }

    // Read 40 bits
    for (int byte = 0; byte < 5; byte++) {
        for (int bit = 0; bit < 8; bit++) {
            // Wait for LOW to HIGH
            timeout = 1000;
            while (!(DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1);
            if (timeout == 0) return 0;

            // Wait 40us, then sample the bit
            delay_us(40);

            if (DHT22_PORT->IDR & DHT22_PIN_MASK)
                bits[byte] |= (1 << (7 - bit));

            // Wait for HIGH to go LOW
            timeout = 1000;
            while ((DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1);
            if (timeout == 0) return 0;
        }
    }

    // Check checksum
    uint8_t checksum = bits[0] + bits[1] + bits[2] + bits[3];
    if (checksum != bits[4]) {
        UART1_SendString("Checksum failed\r\n");
        return 0;
    }
    uint16_t raw_humidity = (bits[0] << 8) | bits[1];
    uint16_t raw_temperature = (bits[2] << 8) | bits[3];

    *humidity = raw_humidity / 10;

    if (raw_temperature & 0x8000) {
        raw_temperature &= 0x7FFF;
        *temperature = -(raw_temperature / 10);
    } else {
        *temperature = raw_temperature / 10;
    }


    UART1_SendString("DHT22 read success\r\n");
    return 1;
}

void DHT22_Init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
    set_pin_input();  // Default idle state
}
