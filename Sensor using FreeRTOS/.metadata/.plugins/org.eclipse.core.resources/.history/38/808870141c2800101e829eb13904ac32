#include "stm32f103xb.h"
#include "uart-driver.h"
#include "gpio-driver.h"
#include "dht22-driver.h"
#include "hc_sr04-driver.h"
#include "delay.h"
#include <string.h>
#include <stdio.h>

char rx_buffer[16];
uint8_t idx = 0;
uint8_t temperature, humidity;

int main(void) {
    UART1_Init();
    GPIO_Init();
    DHT22_Init();
    HC_SR04_Init();
   // Timer1_Init();  // For delay_us
    UART1_SendString("System Initialized\r\n");
    while (1) {
        char c = UART1_ReceiveChar();
        UART1_SendChar(c);  // Echo

        if (c == '\r') {
            rx_buffer[idx] = '\0';

            if (strcmp(rx_buffer, "TSTART") == 0) {
            	  // Read temperature and humidity
     if (DHT22_Read(&temperature, &humidity)) {
         char temp_str[32], humidity_str[32];
         snprintf(temp_str, sizeof(temp_str), "Temperature: %d C\r\n", temperature);
         snprintf(humidity_str, sizeof(humidity_str), "Humidity: %d %%\r\n", humidity);
         UART1_SendString(temp_str);
        if (temperature > 30) {
           BUZZER_ON();
           UART1_SendString("Buzzer ON\r\n");
       } else {
           BUZZER_OFF();
           UART1_SendString("Buzzer OFF\r\n");
    }
   }
       }else {
            UART1_SendString("DHT22 Read Failed\r\n");
  }
        }    else if (strcmp(rx_buffer, "LED ON") == 0) {
                LED_ON();
                UART1_SendString("LED Turned ON\r\n");
            } else if (strcmp(rx_buffer, "LED OFF") == 0) {
                LED_OFF();
                UART1_SendString("LED Turned OFF\r\n");
            } else if (strcmp(rx_buffer, "DIST") == 0) {
                UART1_SendString("Real-time Distance Monitoring Started\r\n");

                while (1) {
                    uint32_t dist = HC_SR04_Read();
                    if (HC_SR04_Read()) {  // Max sensor range ~400 cm
                        char msg[32];
                        snprintf(msg, sizeof(msg), "Distance: %lu cm\r\n", dist);
                        UART1_SendString(msg);
                    }

                    delay_ms(10);  // Adjust rate of update
                    // Break the loop if user types 'X' (optional)
                    if (UART1_ReceiveChar()==("x"||"X")) {
                        char stop = UART1_ReceiveChar();
                        if (stop == 'X') {
                            UART1_SendString("Monitoring Stopped\r\n");
                            break;
                        }
                    }
                }
            } else {
                UART1_SendString("Unknown Command\r\n");
            }

            idx = 0;
        } else if (idx < sizeof(rx_buffer) - 1) {
            rx_buffer[idx++] = c;
        }

        delay_ms(5);
    }
}
