#include "stm32f103xb.h"
#include "uart-driver.h"
#include "gpio-driver.h"
#include "dht22-driver.h"  // Same driver for DHT22
#include <string.h>
#include <stdio.h>

char rx_buffer[16];
uint8_t idx = 0;
uint8_t temperature, humidity;

void delay(volatile uint32_t count) {
    while (count--) {
        __asm__("NOP");
    }
}
void Timer1_Init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
    TIM1->PSC = 72 - 1;        // 1 MHz = 1 Âµs
    TIM1->ARR = 0xFFFF;
    TIM1->CNT = 0;
    TIM1->CR1 |= TIM_CR1_CEN; // Enable TIM1
}


int main(void) {
    UART1_Init();
    GPIO_Init();
    DHT22_Init();
  //  Timer1_Init();
    UART1_SendString("UART Initialized\r\n");

    while (1) {
        char c = UART1_ReceiveChar();
        UART1_SendChar(c);  // Echo

        if (c == '\r') {
            rx_buffer[idx] = '\0';  // Null-terminate command

            if (strcmp(rx_buffer, "TSTART") == 0) {
                // Read temperature and humidity
                if (DHT22_Read(&temperature, &humidity)) {
                    char temp_str[32], humidity_str[32];
                    snprintf(temp_str, sizeof(temp_str), "Temperature: %d C\r\n", temperature);
                    snprintf(humidity_str, sizeof(humidity_str), "Humidity: %d %%\r\n", humidity);
                    UART1_SendString(temp_str);
                    UART1_SendString(humidity_str);

                    if (temperature > 30) {
                        BUZZER_ON();
                        UART1_SendString("Buzzer ON\r\n");
                    } else {
                        BUZZER_OFF();
                        UART1_SendString("Buzzer OFF\r\n");
                    }
                } else {
                    UART1_SendString("DHT22 Read Failed\r\n");
                }
            } else if (strcmp(rx_buffer, "LED ON") == 0) {
                LED_ON();
                UART1_SendString("LED Turned ON\r\n");
            } else if (strcmp(rx_buffer, "LED OFF") == 0) {
                LED_OFF();
                UART1_SendString("LED Turned OFF\r\n");
            } else {
                UART1_SendString("Unknown Command\r\n");
            }

            idx = 0;  // Reset buffer
        } else if (idx < sizeof(rx_buffer) - 1) {
            rx_buffer[idx++] = c;
        }

        delay(100);
    }
}
