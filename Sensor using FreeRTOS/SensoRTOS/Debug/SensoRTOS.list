
SensoRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08003060  08003060  00004060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800362c  0800362c  00005058  2**0
                  CONTENTS
  4 .ARM          00000008  0800362c  0800362c  0000462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003634  08003634  00005058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003634  08003634  00004634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003638  08003638  00004638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  0800363c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000138c  20000058  08003694  00005058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013e4  08003694  000053e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b91a  00000000  00000000  00005081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002719  00000000  00000000  0001099b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000130b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e6  00000000  00000000  00013de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001958f  00000000  00000000  000147c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f15  00000000  00000000  0002dd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009006b  00000000  00000000  0003ec6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cecd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000ced18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d2508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000058 	.word	0x20000058
 800012c:	00000000 	.word	0x00000000
 8000130:	08003048 	.word	0x08003048

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000005c 	.word	0x2000005c
 800014c:	08003048 	.word	0x08003048

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <delay_us>:

//void delay_us(uint32_t us) {
//    TIM1->CNT = 0;
//    while (TIM1->CNT < us);
//}
void delay_us(uint32_t us) {
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
    while (us--) {
 800016c:	e009      	b.n	8000182 <delay_us+0x1e>
        for (volatile uint32_t i = 0; i < 8; i++) {
 800016e:	2300      	movs	r3, #0
 8000170:	60fb      	str	r3, [r7, #12]
 8000172:	e003      	b.n	800017c <delay_us+0x18>
            __asm__("NOP");
 8000174:	bf00      	nop
        for (volatile uint32_t i = 0; i < 8; i++) {
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	3301      	adds	r3, #1
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2b07      	cmp	r3, #7
 8000180:	d9f8      	bls.n	8000174 <delay_us+0x10>
    while (us--) {
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	1e5a      	subs	r2, r3, #1
 8000186:	607a      	str	r2, [r7, #4]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d1f0      	bne.n	800016e <delay_us+0xa>
        }
    }
}
 800018c:	bf00      	nop
 800018e:	bf00      	nop
 8000190:	3714      	adds	r7, #20
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    while (ms--) delay_us(1000);
 80001a0:	e003      	b.n	80001aa <delay_ms+0x12>
 80001a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001a6:	f7ff ffdd 	bl	8000164 <delay_us>
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	1e5a      	subs	r2, r3, #1
 80001ae:	607a      	str	r2, [r7, #4]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d1f6      	bne.n	80001a2 <delay_ms+0xa>
}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
	...

080001c0 <set_pin_output>:

#define DHT22_PORT GPIOA
#define DHT22_PIN  0
#define DHT22_PIN_MASK (1U << DHT22_PIN)

static void set_pin_output(void) {
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
    DHT22_PORT->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 80001c4:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <set_pin_output+0x30>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a09      	ldr	r2, [pc, #36]	@ (80001f0 <set_pin_output+0x30>)
 80001ca:	f023 030f 	bic.w	r3, r3, #15
 80001ce:	6013      	str	r3, [r2, #0]
    DHT22_PORT->CRL |= GPIO_CRL_MODE0_1;      // Output mode 2 MHz
 80001d0:	4b07      	ldr	r3, [pc, #28]	@ (80001f0 <set_pin_output+0x30>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a06      	ldr	r2, [pc, #24]	@ (80001f0 <set_pin_output+0x30>)
 80001d6:	f043 0302 	orr.w	r3, r3, #2
 80001da:	6013      	str	r3, [r2, #0]
    DHT22_PORT->CRL |= GPIO_CRL_CNF0_0;       // General-purpose output open-drain
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <set_pin_output+0x30>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a03      	ldr	r2, [pc, #12]	@ (80001f0 <set_pin_output+0x30>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6013      	str	r3, [r2, #0]
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40010800 	.word	0x40010800

080001f4 <set_pin_input>:

static void set_pin_input(void) {
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
    DHT22_PORT->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 80001f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <set_pin_input+0x30>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a09      	ldr	r2, [pc, #36]	@ (8000224 <set_pin_input+0x30>)
 80001fe:	f023 030f 	bic.w	r3, r3, #15
 8000202:	6013      	str	r3, [r2, #0]
    DHT22_PORT->CRL |= GPIO_CRL_CNF0_1;       // Input with pull-up/down
 8000204:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <set_pin_input+0x30>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a06      	ldr	r2, [pc, #24]	@ (8000224 <set_pin_input+0x30>)
 800020a:	f043 0308 	orr.w	r3, r3, #8
 800020e:	6013      	str	r3, [r2, #0]
    DHT22_PORT->ODR |= DHT22_PIN_MASK;        // Pull-up enabled
 8000210:	4b04      	ldr	r3, [pc, #16]	@ (8000224 <set_pin_input+0x30>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4a03      	ldr	r2, [pc, #12]	@ (8000224 <set_pin_input+0x30>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	60d3      	str	r3, [r2, #12]
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	40010800 	.word	0x40010800

08000228 <DHT22_Read>:


uint8_t DHT22_Read(uint8_t* temperature, uint8_t* humidity) {
 8000228:	b5b0      	push	{r4, r5, r7, lr}
 800022a:	b09c      	sub	sp, #112	@ 0x70
 800022c:	af04      	add	r7, sp, #16
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
    uint8_t bits[5] = {0};
 8000232:	2300      	movs	r3, #0
 8000234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000236:	2300      	movs	r3, #0
 8000238:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

    // Send start signal
    set_pin_output();
 800023c:	f7ff ffc0 	bl	80001c0 <set_pin_output>
    DHT22_PORT->ODR &= ~DHT22_PIN_MASK; // Pull low
 8000240:	4ba2      	ldr	r3, [pc, #648]	@ (80004cc <DHT22_Read+0x2a4>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4aa1      	ldr	r2, [pc, #644]	@ (80004cc <DHT22_Read+0x2a4>)
 8000246:	f023 0301 	bic.w	r3, r3, #1
 800024a:	60d3      	str	r3, [r2, #12]
    delay_us(20000);                    // At least 18ms
 800024c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000250:	f7ff ff88 	bl	8000164 <delay_us>
    DHT22_PORT->ODR |= DHT22_PIN_MASK;  // Pull high
 8000254:	4b9d      	ldr	r3, [pc, #628]	@ (80004cc <DHT22_Read+0x2a4>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a9c      	ldr	r2, [pc, #624]	@ (80004cc <DHT22_Read+0x2a4>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	60d3      	str	r3, [r2, #12]
    delay_us(30);                       // Wait 20-40us
 8000260:	201e      	movs	r0, #30
 8000262:	f7ff ff7f 	bl	8000164 <delay_us>
    set_pin_input();                    // Release line
 8000266:	f7ff ffc5 	bl	80001f4 <set_pin_input>

    // Wait for sensor response: 80us LOW then 80us HIGH
    uint32_t timeout = 1000;
 800026a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while ((DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1); // Wait for LOW
 8000270:	e002      	b.n	8000278 <DHT22_Read+0x50>
 8000272:	2001      	movs	r0, #1
 8000274:	f7ff ff76 	bl	8000164 <delay_us>
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <DHT22_Read+0x2a4>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d004      	beq.n	800028e <DHT22_Read+0x66>
 8000284:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000286:	1e5a      	subs	r2, r3, #1
 8000288:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f1      	bne.n	8000272 <DHT22_Read+0x4a>
    if (timeout == 0) {
 800028e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000290:	2b00      	cmp	r3, #0
 8000292:	d104      	bne.n	800029e <DHT22_Read+0x76>
        UART1_SendString("Timeout: no initial LOW from DHT22\r\n");
 8000294:	488e      	ldr	r0, [pc, #568]	@ (80004d0 <DHT22_Read+0x2a8>)
 8000296:	f000 fc4f 	bl	8000b38 <UART1_SendString>
        return 0;
 800029a:	2300      	movs	r3, #0
 800029c:	e112      	b.n	80004c4 <DHT22_Read+0x29c>
    }

    timeout = 1000;
 800029e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!(DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1); // Wait for HIGH
 80002a4:	e002      	b.n	80002ac <DHT22_Read+0x84>
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ff5c 	bl	8000164 <delay_us>
 80002ac:	4b87      	ldr	r3, [pc, #540]	@ (80004cc <DHT22_Read+0x2a4>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d104      	bne.n	80002c2 <DHT22_Read+0x9a>
 80002b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1f1      	bne.n	80002a6 <DHT22_Read+0x7e>
    if (timeout == 0) {
 80002c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d104      	bne.n	80002d2 <DHT22_Read+0xaa>
        UART1_SendString("Timeout: no HIGH after initial LOW\r\n");
 80002c8:	4882      	ldr	r0, [pc, #520]	@ (80004d4 <DHT22_Read+0x2ac>)
 80002ca:	f000 fc35 	bl	8000b38 <UART1_SendString>
        return 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	e0f8      	b.n	80004c4 <DHT22_Read+0x29c>
    }

    timeout = 1000;
 80002d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while ((DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1); // Wait for final LOW
 80002d8:	e002      	b.n	80002e0 <DHT22_Read+0xb8>
 80002da:	2001      	movs	r0, #1
 80002dc:	f7ff ff42 	bl	8000164 <delay_us>
 80002e0:	4b7a      	ldr	r3, [pc, #488]	@ (80004cc <DHT22_Read+0x2a4>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d004      	beq.n	80002f6 <DHT22_Read+0xce>
 80002ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80002ee:	1e5a      	subs	r2, r3, #1
 80002f0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d1f1      	bne.n	80002da <DHT22_Read+0xb2>
    if (timeout == 0) {
 80002f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d104      	bne.n	8000306 <DHT22_Read+0xde>
        UART1_SendString("Timeout: line didn't go LOW before data\r\n");
 80002fc:	4876      	ldr	r0, [pc, #472]	@ (80004d8 <DHT22_Read+0x2b0>)
 80002fe:	f000 fc1b 	bl	8000b38 <UART1_SendString>
        return 0;
 8000302:	2300      	movs	r3, #0
 8000304:	e0de      	b.n	80004c4 <DHT22_Read+0x29c>
    }

    // Read 40 bits
    for (int byte = 0; byte < 5; byte++) {
 8000306:	2300      	movs	r3, #0
 8000308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800030a:	e05e      	b.n	80003ca <DHT22_Read+0x1a2>
        for (int bit = 0; bit < 8; bit++) {
 800030c:	2300      	movs	r3, #0
 800030e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000310:	e055      	b.n	80003be <DHT22_Read+0x196>
            // Wait for LOW -> HIGH
            timeout = 1000;
 8000312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000316:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (!(DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1);
 8000318:	e002      	b.n	8000320 <DHT22_Read+0xf8>
 800031a:	2001      	movs	r0, #1
 800031c:	f7ff ff22 	bl	8000164 <delay_us>
 8000320:	4b6a      	ldr	r3, [pc, #424]	@ (80004cc <DHT22_Read+0x2a4>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d104      	bne.n	8000336 <DHT22_Read+0x10e>
 800032c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800032e:	1e5a      	subs	r2, r3, #1
 8000330:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000332:	2b00      	cmp	r3, #0
 8000334:	d1f1      	bne.n	800031a <DHT22_Read+0xf2>
            if (timeout == 0) {
 8000336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000338:	2b00      	cmp	r3, #0
 800033a:	d104      	bne.n	8000346 <DHT22_Read+0x11e>
                UART1_SendString("Timeout: wait for bit start\r\n");
 800033c:	4867      	ldr	r0, [pc, #412]	@ (80004dc <DHT22_Read+0x2b4>)
 800033e:	f000 fbfb 	bl	8000b38 <UART1_SendString>
                return 0;
 8000342:	2300      	movs	r3, #0
 8000344:	e0be      	b.n	80004c4 <DHT22_Read+0x29c>
            }

            // Start timing to distinguish 0 vs 1
            delay_us(40);
 8000346:	2028      	movs	r0, #40	@ 0x28
 8000348:	f7ff ff0c 	bl	8000164 <delay_us>

            if (DHT22_PORT->IDR & DHT22_PIN_MASK)
 800034c:	4b5f      	ldr	r3, [pc, #380]	@ (80004cc <DHT22_Read+0x2a4>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	2b00      	cmp	r3, #0
 8000356:	d015      	beq.n	8000384 <DHT22_Read+0x15c>
                bits[byte] |= (1 << (7 - bit));  // MSB first
 8000358:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800035c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800035e:	4413      	add	r3, r2
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b25a      	sxtb	r2, r3
 8000364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	b25b      	sxtb	r3, r3
 8000372:	4313      	orrs	r3, r2
 8000374:	b25b      	sxtb	r3, r3
 8000376:	b2d9      	uxtb	r1, r3
 8000378:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800037c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800037e:	4413      	add	r3, r2
 8000380:	460a      	mov	r2, r1
 8000382:	701a      	strb	r2, [r3, #0]

            // Wait for HIGH -> LOW (end of bit)
            timeout = 1000;
 8000384:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000388:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while ((DHT22_PORT->IDR & DHT22_PIN_MASK) && timeout--) delay_us(1);
 800038a:	e002      	b.n	8000392 <DHT22_Read+0x16a>
 800038c:	2001      	movs	r0, #1
 800038e:	f7ff fee9 	bl	8000164 <delay_us>
 8000392:	4b4e      	ldr	r3, [pc, #312]	@ (80004cc <DHT22_Read+0x2a4>)
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	2b00      	cmp	r3, #0
 800039c:	d004      	beq.n	80003a8 <DHT22_Read+0x180>
 800039e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80003a0:	1e5a      	subs	r2, r3, #1
 80003a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d1f1      	bne.n	800038c <DHT22_Read+0x164>
            if (timeout == 0) {
 80003a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d104      	bne.n	80003b8 <DHT22_Read+0x190>
                UART1_SendString("Timeout: bit did not end\r\n");
 80003ae:	484c      	ldr	r0, [pc, #304]	@ (80004e0 <DHT22_Read+0x2b8>)
 80003b0:	f000 fbc2 	bl	8000b38 <UART1_SendString>
                return 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	e085      	b.n	80004c4 <DHT22_Read+0x29c>
        for (int bit = 0; bit < 8; bit++) {
 80003b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80003ba:	3301      	adds	r3, #1
 80003bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80003be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80003c0:	2b07      	cmp	r3, #7
 80003c2:	dda6      	ble.n	8000312 <DHT22_Read+0xea>
    for (int byte = 0; byte < 5; byte++) {
 80003c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80003c6:	3301      	adds	r3, #1
 80003c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80003ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80003cc:	2b04      	cmp	r3, #4
 80003ce:	dd9d      	ble.n	800030c <DHT22_Read+0xe4>
            }
        }
    }

    // Checksum validation
    uint8_t checksum = bits[0] + bits[1] + bits[2] + bits[3];
 80003d0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80003d4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80003d8:	4413      	add	r3, r2
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80003e0:	4413      	add	r3, r2
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80003e8:	4413      	add	r3, r2
 80003ea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    char buf[64];
    sprintf(buf, "Raw: %d %d %d %d %d\r\n", bits[0], bits[1], bits[2], bits[3], bits[4]);
 80003ee:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80003f2:	461c      	mov	r4, r3
 80003f4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80003f8:	461d      	mov	r5, r3
 80003fa:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80003fe:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8000402:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 8000406:	f107 0008 	add.w	r0, r7, #8
 800040a:	9102      	str	r1, [sp, #8]
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	462b      	mov	r3, r5
 8000412:	4622      	mov	r2, r4
 8000414:	4933      	ldr	r1, [pc, #204]	@ (80004e4 <DHT22_Read+0x2bc>)
 8000416:	f002 f967 	bl	80026e8 <siprintf>
    UART1_SendString(buf);
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fb8a 	bl	8000b38 <UART1_SendString>
    if (checksum != bits[4]) {
 8000424:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000428:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800042c:	429a      	cmp	r2, r3
 800042e:	d004      	beq.n	800043a <DHT22_Read+0x212>
        UART1_SendString("Checksum failed\r\n");
 8000430:	482d      	ldr	r0, [pc, #180]	@ (80004e8 <DHT22_Read+0x2c0>)
 8000432:	f000 fb81 	bl	8000b38 <UART1_SendString>
        return 0;
 8000436:	2300      	movs	r3, #0
 8000438:	e044      	b.n	80004c4 <DHT22_Read+0x29c>
    }

    // Parse temperature and humidity
    uint16_t raw_humidity = (bits[0] << 8) | bits[1];
 800043a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800043e:	021b      	lsls	r3, r3, #8
 8000440:	b21a      	sxth	r2, r3
 8000442:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000446:	b21b      	sxth	r3, r3
 8000448:	4313      	orrs	r3, r2
 800044a:	b21b      	sxth	r3, r3
 800044c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    uint16_t raw_temperature = (bits[2] << 8) | bits[3];
 8000450:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000454:	021b      	lsls	r3, r3, #8
 8000456:	b21a      	sxth	r2, r3
 8000458:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800045c:	b21b      	sxth	r3, r3
 800045e:	4313      	orrs	r3, r2
 8000460:	b21b      	sxth	r3, r3
 8000462:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    *humidity = raw_humidity / 10;
 8000466:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800046a:	4a20      	ldr	r2, [pc, #128]	@ (80004ec <DHT22_Read+0x2c4>)
 800046c:	fba2 2303 	umull	r2, r3, r2, r3
 8000470:	08db      	lsrs	r3, r3, #3
 8000472:	b29b      	uxth	r3, r3
 8000474:	b2da      	uxtb	r2, r3
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	701a      	strb	r2, [r3, #0]

    if (raw_temperature & 0x8000) {
 800047a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800047e:	2b00      	cmp	r3, #0
 8000480:	da12      	bge.n	80004a8 <DHT22_Read+0x280>
        raw_temperature &= 0x7FFF;
 8000482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000486:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800048a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        *temperature = -(raw_temperature / 10);
 800048e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000492:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <DHT22_Read+0x2c4>)
 8000494:	fba2 2303 	umull	r2, r3, r2, r3
 8000498:	08db      	lsrs	r3, r3, #3
 800049a:	b29b      	uxth	r3, r3
 800049c:	b2db      	uxtb	r3, r3
 800049e:	425b      	negs	r3, r3
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	e009      	b.n	80004bc <DHT22_Read+0x294>
    } else {
        *temperature = raw_temperature / 10;
 80004a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80004ac:	4a0f      	ldr	r2, [pc, #60]	@ (80004ec <DHT22_Read+0x2c4>)
 80004ae:	fba2 2303 	umull	r2, r3, r2, r3
 80004b2:	08db      	lsrs	r3, r3, #3
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	701a      	strb	r2, [r3, #0]
    }

    UART1_SendString("DHT22 read success\r\n");
 80004bc:	480c      	ldr	r0, [pc, #48]	@ (80004f0 <DHT22_Read+0x2c8>)
 80004be:	f000 fb3b 	bl	8000b38 <UART1_SendString>
    return 1;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3760      	adds	r7, #96	@ 0x60
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bdb0      	pop	{r4, r5, r7, pc}
 80004cc:	40010800 	.word	0x40010800
 80004d0:	08003060 	.word	0x08003060
 80004d4:	08003088 	.word	0x08003088
 80004d8:	080030b0 	.word	0x080030b0
 80004dc:	080030dc 	.word	0x080030dc
 80004e0:	080030fc 	.word	0x080030fc
 80004e4:	08003118 	.word	0x08003118
 80004e8:	08003130 	.word	0x08003130
 80004ec:	cccccccd 	.word	0xcccccccd
 80004f0:	08003144 	.word	0x08003144

080004f4 <DHT22_Init>:

void DHT22_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80004f8:	4b04      	ldr	r3, [pc, #16]	@ (800050c <DHT22_Init+0x18>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a03      	ldr	r2, [pc, #12]	@ (800050c <DHT22_Init+0x18>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
    set_pin_input();  // Set idle state as input with pull-up
 8000504:	f7ff fe76 	bl	80001f4 <set_pin_input>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000

08000510 <LED_ON>:
    GPIOA->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
    GPIOA->CRL |=  (GPIO_CRL_MODE6_1 | GPIO_CRL_MODE6_0); // Output mode, 50 MHz
    GPIOA->CRL |=  0x0;                                   // General purpose output push-pull
 }

void LED_ON(void) {
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BS5;
 8000514:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <LED_ON+0x14>)
 8000516:	2220      	movs	r2, #32
 8000518:	611a      	str	r2, [r3, #16]
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40010800 	.word	0x40010800

08000528 <LED_OFF>:

void LED_OFF(void) {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BR5;
 800052c:	4b03      	ldr	r3, [pc, #12]	@ (800053c <LED_OFF+0x14>)
 800052e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000532:	611a      	str	r2, [r3, #16]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40010800 	.word	0x40010800

08000540 <BUZZER_ON>:

void BUZZER_ON(void) {
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BS6;  // Set PA6 high
 8000544:	4b03      	ldr	r3, [pc, #12]	@ (8000554 <BUZZER_ON+0x14>)
 8000546:	2240      	movs	r2, #64	@ 0x40
 8000548:	611a      	str	r2, [r3, #16]
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40010800 	.word	0x40010800

08000558 <BUZZER_OFF>:

void BUZZER_OFF(void) {
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BR6;  // Set PA6 low
 800055c:	4b03      	ldr	r3, [pc, #12]	@ (800056c <BUZZER_OFF+0x14>)
 800055e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000562:	611a      	str	r2, [r3, #16]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40010800 	.word	0x40010800

08000570 <HC_SR04_Init>:
#define ECHO_PIN 2

#define TRIG_PORT GPIOA
#define ECHO_PORT GPIOA

void HC_SR04_Init(void) {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
    // Enable GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HC_SR04_Init+0x50>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a11      	ldr	r2, [pc, #68]	@ (80005c0 <HC_SR04_Init+0x50>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]

    // --- TRIG: PA1 as Output Push-Pull ---
    TRIG_PORT->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);         // Clear bits
 8000580:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <HC_SR04_Init+0x54>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0f      	ldr	r2, [pc, #60]	@ (80005c4 <HC_SR04_Init+0x54>)
 8000586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800058a:	6013      	str	r3, [r2, #0]
    TRIG_PORT->CRL |= (0b10 << GPIO_CRL_MODE1_Pos);              // Output mode, 2 MHz
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <HC_SR04_Init+0x54>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0c      	ldr	r2, [pc, #48]	@ (80005c4 <HC_SR04_Init+0x54>)
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	6013      	str	r3, [r2, #0]
    TRIG_PORT->CRL |= (0b00 << GPIO_CRL_CNF1_Pos);               // Push-pull
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <HC_SR04_Init+0x54>)
 800059a:	4a0a      	ldr	r2, [pc, #40]	@ (80005c4 <HC_SR04_Init+0x54>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6013      	str	r3, [r2, #0]

    // --- ECHO: PA2 as Floating Input ---
    ECHO_PORT->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);         // Clear bits
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <HC_SR04_Init+0x54>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <HC_SR04_Init+0x54>)
 80005a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80005aa:	6013      	str	r3, [r2, #0]
    ECHO_PORT->CRL |= (0b01 << GPIO_CRL_CNF2_Pos);               // Floating input
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <HC_SR04_Init+0x54>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <HC_SR04_Init+0x54>)
 80005b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010800 	.word	0x40010800

080005c8 <HC_SR04_Read>:


uint32_t HC_SR04_Read(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
    uint32_t time_us = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
    uint32_t timeout = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]

    // Ensure trigger is low
    TRIG_PORT->ODR &= ~(1 << TRIG_PIN);
 80005d6:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <HC_SR04_Read+0xa8>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <HC_SR04_Read+0xa8>)
 80005dc:	f023 0302 	bic.w	r3, r3, #2
 80005e0:	60d3      	str	r3, [r2, #12]
    delay_us(2);
 80005e2:	2002      	movs	r0, #2
 80005e4:	f7ff fdbe 	bl	8000164 <delay_us>

    // Trigger high for 10us
    TRIG_PORT->ODR |= (1 << TRIG_PIN);
 80005e8:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <HC_SR04_Read+0xa8>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a20      	ldr	r2, [pc, #128]	@ (8000670 <HC_SR04_Read+0xa8>)
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	60d3      	str	r3, [r2, #12]
    delay_us(10);
 80005f4:	200a      	movs	r0, #10
 80005f6:	f7ff fdb5 	bl	8000164 <delay_us>
    TRIG_PORT->ODR &= ~(1 << TRIG_PIN);
 80005fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <HC_SR04_Read+0xa8>)
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000670 <HC_SR04_Read+0xa8>)
 8000600:	f023 0302 	bic.w	r3, r3, #2
 8000604:	60d3      	str	r3, [r2, #12]

    // Wait for ECHO to go HIGH (with timeout)
    timeout = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	603b      	str	r3, [r7, #0]
    while (!(ECHO_PORT->IDR & (1 << ECHO_PIN))) {
 800060a:	e00c      	b.n	8000626 <HC_SR04_Read+0x5e>
        delay_us(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff fda9 	bl	8000164 <delay_us>
        if (++timeout > 3000) return 0;  // Timeout after 30 ms
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800061e:	4293      	cmp	r3, r2
 8000620:	d901      	bls.n	8000626 <HC_SR04_Read+0x5e>
 8000622:	2300      	movs	r3, #0
 8000624:	e020      	b.n	8000668 <HC_SR04_Read+0xa0>
    while (!(ECHO_PORT->IDR & (1 << ECHO_PIN))) {
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HC_SR04_Read+0xa8>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0ec      	beq.n	800060c <HC_SR04_Read+0x44>
    }

    // Measure HIGH pulse duration
    time_us = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
    while (ECHO_PORT->IDR & (1 << ECHO_PIN)) {
 8000636:	e00a      	b.n	800064e <HC_SR04_Read+0x86>
        delay_us(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff fd93 	bl	8000164 <delay_us>
        time_us++;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3301      	adds	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
        if (time_us > 3000) break;  // Timeout after 30 ms
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800064a:	4293      	cmp	r3, r2
 800064c:	d806      	bhi.n	800065c <HC_SR04_Read+0x94>
    while (ECHO_PORT->IDR & (1 << ECHO_PIN)) {
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <HC_SR04_Read+0xa8>)
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1ee      	bne.n	8000638 <HC_SR04_Read+0x70>
 800065a:	e000      	b.n	800065e <HC_SR04_Read+0x96>
        if (time_us > 3000) break;  // Timeout after 30 ms
 800065c:	bf00      	nop
    }

    return time_us / 58;  // Distance in cm
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <HC_SR04_Read+0xac>)
 8000662:	fba2 2303 	umull	r2, r3, r2, r3
 8000666:	095b      	lsrs	r3, r3, #5
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40010800 	.word	0x40010800
 8000674:	8d3dcb09 	.word	0x8d3dcb09

08000678 <I2C1_Write>:
#define SSD1306_HEIGHT 32
#define SSD1306_BUFFERSIZE (SSD1306_WIDTH * SSD1306_HEIGHT / 8)

static uint8_t buffer[SSD1306_BUFFERSIZE];

static void I2C1_Write(uint8_t control, uint8_t data) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	460a      	mov	r2, r1
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	4613      	mov	r3, r2
 8000686:	71bb      	strb	r3, [r7, #6]
    while (I2C1->SR2 & I2C_SR2_BUSY);
 8000688:	bf00      	nop
 800068a:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <I2C1_Write+0x98>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f9      	bne.n	800068a <I2C1_Write+0x12>
    I2C1->CR1 |= I2C_CR1_START;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <I2C1_Write+0x98>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a1d      	ldr	r2, [pc, #116]	@ (8000710 <I2C1_Write+0x98>)
 800069c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a0:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80006a2:	bf00      	nop
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <I2C1_Write+0x98>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0f9      	beq.n	80006a4 <I2C1_Write+0x2c>
    (void)I2C1->SR1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <I2C1_Write+0x98>)
 80006b2:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = SSD1306_ADDR;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <I2C1_Write+0x98>)
 80006b6:	2278      	movs	r2, #120	@ 0x78
 80006b8:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80006ba:	bf00      	nop
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <I2C1_Write+0x98>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	f003 0302 	and.w	r3, r3, #2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <I2C1_Write+0x44>
    (void)I2C1->SR2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <I2C1_Write+0x98>)
 80006ca:	699b      	ldr	r3, [r3, #24]

    I2C1->DR = control;
 80006cc:	4a10      	ldr	r2, [pc, #64]	@ (8000710 <I2C1_Write+0x98>)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80006d2:	bf00      	nop
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <I2C1_Write+0x98>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f9      	beq.n	80006d4 <I2C1_Write+0x5c>
    I2C1->DR = data;
 80006e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <I2C1_Write+0x98>)
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80006e6:	bf00      	nop
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <I2C1_Write+0x98>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f9      	beq.n	80006e8 <I2C1_Write+0x70>

    I2C1->CR1 |= I2C_CR1_STOP;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <I2C1_Write+0x98>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <I2C1_Write+0x98>)
 80006fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006fe:	6013      	str	r3, [r2, #0]
    delay_us(10);
 8000700:	200a      	movs	r0, #10
 8000702:	f7ff fd2f 	bl	8000164 <delay_us>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40005400 	.word	0x40005400

08000714 <SSD1306_WriteCommand>:

static void SSD1306_WriteCommand(uint8_t cmd) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
    I2C1_Write(0x00, cmd);
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4619      	mov	r1, r3
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ffa8 	bl	8000678 <I2C1_Write>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <SSD1306_WriteData>:

static void SSD1306_WriteData(uint8_t data) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
    I2C1_Write(0x40, data);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	4619      	mov	r1, r3
 800073e:	2040      	movs	r0, #64	@ 0x40
 8000740:	f7ff ff9a 	bl	8000678 <I2C1_Write>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <SSD1306_I2C_Init>:

void SSD1306_I2C_Init(void) {
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  //  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <SSD1306_I2C_Init+0x54>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <SSD1306_I2C_Init+0x54>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800075a:	61d3      	str	r3, [r2, #28]
    //RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;

    // PB6 (SCL), PB7 (SDA) -> Alt open-drain, 2MHz
    GPIOB->CRL &= ~((GPIO_CRL_CNF6 | GPIO_CRL_MODE6) | (GPIO_CRL_CNF7 | GPIO_CRL_MODE7));
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <SSD1306_I2C_Init+0x58>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <SSD1306_I2C_Init+0x58>)
 8000762:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000766:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_CNF6_1 | GPIO_CRL_MODE6_1);  // AF Open-drain
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SSD1306_I2C_Init+0x58>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SSD1306_I2C_Init+0x58>)
 800076e:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8000772:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_CNF7_1 | GPIO_CRL_MODE7_1);
 8000774:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <SSD1306_I2C_Init+0x58>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <SSD1306_I2C_Init+0x58>)
 800077a:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 800077e:	6013      	str	r3, [r2, #0]

    I2C1->CR2 = 36;  // PCLK1 = 36MHz
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <SSD1306_I2C_Init+0x5c>)
 8000782:	2224      	movs	r2, #36	@ 0x24
 8000784:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 180; // 100kHz standard mode
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <SSD1306_I2C_Init+0x5c>)
 8000788:	22b4      	movs	r2, #180	@ 0xb4
 800078a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 37;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <SSD1306_I2C_Init+0x5c>)
 800078e:	2225      	movs	r2, #37	@ 0x25
 8000790:	621a      	str	r2, [r3, #32]
    I2C1->CR1 = I2C_CR1_PE;
 8000792:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <SSD1306_I2C_Init+0x5c>)
 8000794:	2201      	movs	r2, #1
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010c00 	.word	0x40010c00
 80007a8:	40005400 	.word	0x40005400

080007ac <SSD1306_Init>:

void SSD1306_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    SSD1306_I2C_Init();
 80007b0:	f7ff ffcc 	bl	800074c <SSD1306_I2C_Init>
    delay_ms(100);
 80007b4:	2064      	movs	r0, #100	@ 0x64
 80007b6:	f7ff fcef 	bl	8000198 <delay_ms>

    SSD1306_WriteCommand(0xAE); // Display OFF
 80007ba:	20ae      	movs	r0, #174	@ 0xae
 80007bc:	f7ff ffaa 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD5); SSD1306_WriteCommand(0x80); // Set display clock
 80007c0:	20d5      	movs	r0, #213	@ 0xd5
 80007c2:	f7ff ffa7 	bl	8000714 <SSD1306_WriteCommand>
 80007c6:	2080      	movs	r0, #128	@ 0x80
 80007c8:	f7ff ffa4 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA8); SSD1306_WriteCommand(0x1F); // Multiplex ratio
 80007cc:	20a8      	movs	r0, #168	@ 0xa8
 80007ce:	f7ff ffa1 	bl	8000714 <SSD1306_WriteCommand>
 80007d2:	201f      	movs	r0, #31
 80007d4:	f7ff ff9e 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD3); SSD1306_WriteCommand(0x00); // Display offset
 80007d8:	20d3      	movs	r0, #211	@ 0xd3
 80007da:	f7ff ff9b 	bl	8000714 <SSD1306_WriteCommand>
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ff98 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x40); // Start line
 80007e4:	2040      	movs	r0, #64	@ 0x40
 80007e6:	f7ff ff95 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x8D); SSD1306_WriteCommand(0x14); // Enable charge pump
 80007ea:	208d      	movs	r0, #141	@ 0x8d
 80007ec:	f7ff ff92 	bl	8000714 <SSD1306_WriteCommand>
 80007f0:	2014      	movs	r0, #20
 80007f2:	f7ff ff8f 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x20); SSD1306_WriteCommand(0x00); // Horizontal addressing
 80007f6:	2020      	movs	r0, #32
 80007f8:	f7ff ff8c 	bl	8000714 <SSD1306_WriteCommand>
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff ff89 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA1); // Segment remap
 8000802:	20a1      	movs	r0, #161	@ 0xa1
 8000804:	f7ff ff86 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xC8); // COM scan direction
 8000808:	20c8      	movs	r0, #200	@ 0xc8
 800080a:	f7ff ff83 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xDA); SSD1306_WriteCommand(0x02); // COM pins config
 800080e:	20da      	movs	r0, #218	@ 0xda
 8000810:	f7ff ff80 	bl	8000714 <SSD1306_WriteCommand>
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff ff7d 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x81); SSD1306_WriteCommand(0x8F); // Contrast
 800081a:	2081      	movs	r0, #129	@ 0x81
 800081c:	f7ff ff7a 	bl	8000714 <SSD1306_WriteCommand>
 8000820:	208f      	movs	r0, #143	@ 0x8f
 8000822:	f7ff ff77 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD9); SSD1306_WriteCommand(0xF1); // Precharge
 8000826:	20d9      	movs	r0, #217	@ 0xd9
 8000828:	f7ff ff74 	bl	8000714 <SSD1306_WriteCommand>
 800082c:	20f1      	movs	r0, #241	@ 0xf1
 800082e:	f7ff ff71 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xDB); SSD1306_WriteCommand(0x40); // VCOMH
 8000832:	20db      	movs	r0, #219	@ 0xdb
 8000834:	f7ff ff6e 	bl	8000714 <SSD1306_WriteCommand>
 8000838:	2040      	movs	r0, #64	@ 0x40
 800083a:	f7ff ff6b 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA4); // Resume to RAM
 800083e:	20a4      	movs	r0, #164	@ 0xa4
 8000840:	f7ff ff68 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA6); // Normal display
 8000844:	20a6      	movs	r0, #166	@ 0xa6
 8000846:	f7ff ff65 	bl	8000714 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xAF); // Display ON
 800084a:	20af      	movs	r0, #175	@ 0xaf
 800084c:	f7ff ff62 	bl	8000714 <SSD1306_WriteCommand>

    SSD1306_Clear();
 8000850:	f000 f804 	bl	800085c <SSD1306_Clear>
    SSD1306_UpdateScreen();
 8000854:	f000 f80e 	bl	8000874 <SSD1306_UpdateScreen>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <SSD1306_Clear>:

void SSD1306_Clear(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    memset(buffer, 0x00, sizeof(buffer));
 8000860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000864:	2100      	movs	r1, #0
 8000866:	4802      	ldr	r0, [pc, #8]	@ (8000870 <SSD1306_Clear+0x14>)
 8000868:	f001 ff5e 	bl	8002728 <memset>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000074 	.word	0x20000074

08000874 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 4; page++) {
 800087a:	2300      	movs	r3, #0
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	e021      	b.n	80008c4 <SSD1306_UpdateScreen+0x50>
        SSD1306_WriteCommand(0xB0 + page);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3b50      	subs	r3, #80	@ 0x50
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff44 	bl	8000714 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(0x00);
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff ff41 	bl	8000714 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(0x10);
 8000892:	2010      	movs	r0, #16
 8000894:	f7ff ff3e 	bl	8000714 <SSD1306_WriteCommand>
        for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8000898:	2300      	movs	r3, #0
 800089a:	71bb      	strb	r3, [r7, #6]
 800089c:	e00b      	b.n	80008b6 <SSD1306_UpdateScreen+0x42>
            SSD1306_WriteData(buffer[page * SSD1306_WIDTH + i]);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	01da      	lsls	r2, r3, #7
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a0b      	ldr	r2, [pc, #44]	@ (80008d4 <SSD1306_UpdateScreen+0x60>)
 80008a8:	5cd3      	ldrb	r3, [r2, r3]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff40 	bl	8000730 <SSD1306_WriteData>
        for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	3301      	adds	r3, #1
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	daef      	bge.n	800089e <SSD1306_UpdateScreen+0x2a>
    for (uint8_t page = 0; page < 4; page++) {
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	3301      	adds	r3, #1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d9da      	bls.n	8000880 <SSD1306_UpdateScreen+0xc>
        }
    }
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000074 	.word	0x20000074

080008d8 <SSD1306_DisplayString>:

void SSD1306_DisplayString(uint8_t row, uint8_t col, const char* str) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	603a      	str	r2, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	460b      	mov	r3, r1
 80008e6:	71bb      	strb	r3, [r7, #6]
    extern const uint8_t Font6x8[][6];
    uint16_t offset = row * SSD1306_WIDTH + col * 6;
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	01db      	lsls	r3, r3, #7
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	0049      	lsls	r1, r1, #1
 80008f8:	440b      	add	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	4413      	add	r3, r2
 8000900:	81fb      	strh	r3, [r7, #14]
    while (*str && offset < SSD1306_BUFFERSIZE - 6) {
 8000902:	e020      	b.n	8000946 <SSD1306_DisplayString+0x6e>
        for (int i = 0; i < 6; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	e014      	b.n	8000934 <SSD1306_DisplayString+0x5c>
            buffer[offset + i] = Font6x8[*str - 32][i];
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f1a3 0220 	sub.w	r2, r3, #32
 8000912:	89f9      	ldrh	r1, [r7, #14]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4419      	add	r1, r3
 8000918:	4812      	ldr	r0, [pc, #72]	@ (8000964 <SSD1306_DisplayString+0x8c>)
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	18c2      	adds	r2, r0, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4413      	add	r3, r2
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <SSD1306_DisplayString+0x90>)
 800092c:	545a      	strb	r2, [r3, r1]
        for (int i = 0; i < 6; i++) {
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	3301      	adds	r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	2b05      	cmp	r3, #5
 8000938:	dde7      	ble.n	800090a <SSD1306_DisplayString+0x32>
        }
        offset += 6;
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	3306      	adds	r3, #6
 800093e:	81fb      	strh	r3, [r7, #14]
        str++;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	603b      	str	r3, [r7, #0]
    while (*str && offset < SSD1306_BUFFERSIZE - 6) {
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d003      	beq.n	8000956 <SSD1306_DisplayString+0x7e>
 800094e:	89fb      	ldrh	r3, [r7, #14]
 8000950:	f5b3 7ffd 	cmp.w	r3, #506	@ 0x1fa
 8000954:	d3d6      	bcc.n	8000904 <SSD1306_DisplayString+0x2c>
    }
    SSD1306_UpdateScreen();
 8000956:	f7ff ff8d 	bl	8000874 <SSD1306_UpdateScreen>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	080033b4 	.word	0x080033b4
 8000968:	20000074 	.word	0x20000074

0800096c <SystemClock_Config>:
 *  Created on: May 4, 2025
 *      Author: sande
 */
#include "stm32f103xb.h"

void SystemClock_Config(void) {
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
    // Enable HSE (High-Speed External) oscillator
    RCC->CR |= RCC_CR_HSEON;
 8000970:	4b3c      	ldr	r3, [pc, #240]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a3b      	ldr	r2, [pc, #236]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800097a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));  // Wait until HSE is ready
 800097c:	bf00      	nop
 800097e:	4b39      	ldr	r3, [pc, #228]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f9      	beq.n	800097e <SystemClock_Config+0x12>

    // Configure Flash latency (2 wait states for 72 MHz)
    FLASH->ACR |= FLASH_ACR_PRFTBE;       // Enable Prefetch Buffer
 800098a:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <SystemClock_Config+0xfc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a36      	ldr	r2, [pc, #216]	@ (8000a68 <SystemClock_Config+0xfc>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6013      	str	r3, [r2, #0]
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000996:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <SystemClock_Config+0xfc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a33      	ldr	r2, [pc, #204]	@ (8000a68 <SystemClock_Config+0xfc>)
 800099c:	f023 0307 	bic.w	r3, r3, #7
 80009a0:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2;    // 2 wait states
 80009a2:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <SystemClock_Config+0xfc>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a30      	ldr	r2, [pc, #192]	@ (8000a68 <SystemClock_Config+0xfc>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6013      	str	r3, [r2, #0]

    // Configure PLL
    RCC->CFGR &= ~RCC_CFGR_PLLSRC;        // Clear PLL source
 80009ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009b8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC;         // HSE oscillator clock selected as PLL input
 80009ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4a29      	ldr	r2, [pc, #164]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009c4:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 80009c6:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	4a26      	ldr	r2, [pc, #152]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009cc:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80009d0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9;       // PLL = 8 MHz * 9 = 72 MHz
 80009d2:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a23      	ldr	r2, [pc, #140]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009d8:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 80009dc:	6053      	str	r3, [r2, #4]

    RCC->CR |= RCC_CR_PLLON;              // Enable PLL
 80009de:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a20      	ldr	r2, [pc, #128]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009e8:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));   // Wait until PLL is ready
 80009ea:	bf00      	nop
 80009ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <SystemClock_Config+0x80>

    // Select PLL as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a19      	ldr	r2, [pc, #100]	@ (8000a64 <SystemClock_Config+0xf8>)
 80009fe:	f023 0303 	bic.w	r3, r3, #3
 8000a02:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a16      	ldr	r2, [pc, #88]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // Wait until PLL is system clock
 8000a10:	bf00      	nop
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 030c 	and.w	r3, r3, #12
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d1f9      	bne.n	8000a12 <SystemClock_Config+0xa6>

    // Set HCLK = SYSCLK
    RCC->CFGR &= ~RCC_CFGR_HPRE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a10      	ldr	r2, [pc, #64]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000a28:	6053      	str	r3, [r2, #4]

    // Set PCLK1 = HCLK/2
    RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a34:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a40:	6053      	str	r3, [r2, #4]

    // Set PCLK2 = HCLK
    RCC->CFGR &= ~RCC_CFGR_PPRE2;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a48:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000a4c:	6053      	str	r3, [r2, #4]

    // Optional: Enable GPIO clocks if not already done
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN |
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <SystemClock_Config+0xf8>)
 8000a54:	f043 031d 	orr.w	r3, r3, #29
 8000a58:	6193      	str	r3, [r2, #24]
                    RCC_APB2ENR_IOPBEN |
                    RCC_APB2ENR_IOPCEN |
                    RCC_APB2ENR_AFIOEN;
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40022000 	.word	0x40022000

08000a6c <UART1_Init>:
 *      Author: sande
 */
#include "stm32f103xb.h"
#include "uart-driver.h"

void UART1_Init(void) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
    // Enable GPIOA and USART1 clocks
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN | RCC_APB2ENR_AFIOEN;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <UART1_Init+0x70>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <UART1_Init+0x70>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7a:	f043 0305 	orr.w	r3, r3, #5
 8000a7e:	6193      	str	r3, [r2, #24]

    // PA9 (TX): Alternate Function Push-Pull
    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <UART1_Init+0x74>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a16      	ldr	r2, [pc, #88]	@ (8000ae0 <UART1_Init+0x74>)
 8000a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000a8a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=  (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0); // Output 50 MHz
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <UART1_Init+0x74>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <UART1_Init+0x74>)
 8000a92:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000a96:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=  GPIO_CRH_CNF9_1;                       // AF Push-Pull
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <UART1_Init+0x74>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <UART1_Init+0x74>)
 8000a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa2:	6053      	str	r3, [r2, #4]

    // PA10 (RX): Input Floating
    GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <UART1_Init+0x74>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <UART1_Init+0x74>)
 8000aaa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000aae:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0;                       // Input floating
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <UART1_Init+0x74>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <UART1_Init+0x74>)
 8000ab6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aba:	6053      	str	r3, [r2, #4]

    // Set baud rate (72 MHz / 16 / 9600) = 468.75 => BRR = 0x1D4C
    USART1->BRR = 0x1D4C;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <UART1_Init+0x78>)
 8000abe:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8000ac2:	609a      	str	r2, [r3, #8]

    // Enable USART, TX, RX
    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <UART1_Init+0x78>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <UART1_Init+0x78>)
 8000aca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ace:	f043 030c 	orr.w	r3, r3, #12
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40013800 	.word	0x40013800

08000ae8 <UART1_SendChar>:

void UART1_SendChar(char c) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 8000af2:	bf00      	nop
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <UART1_SendChar+0x28>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0f9      	beq.n	8000af4 <UART1_SendChar+0xc>
    USART1->DR = c;
 8000b00:	4a03      	ldr	r2, [pc, #12]	@ (8000b10 <UART1_SendChar+0x28>)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	6053      	str	r3, [r2, #4]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40013800 	.word	0x40013800

08000b14 <UART1_ReceiveChar>:

char UART1_ReceiveChar(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
    while (!(USART1->SR & USART_SR_RXNE));
 8000b18:	bf00      	nop
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <UART1_ReceiveChar+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0320 	and.w	r3, r3, #32
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0f9      	beq.n	8000b1a <UART1_ReceiveChar+0x6>
    return USART1->DR;
 8000b26:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <UART1_ReceiveChar+0x20>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	b2db      	uxtb	r3, r3
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40013800 	.word	0x40013800

08000b38 <UART1_SendString>:

void UART1_SendString(const char *str) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000b40:	e006      	b.n	8000b50 <UART1_SendString+0x18>
        UART1_SendChar(*str++);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ffcc 	bl	8000ae8 <UART1_SendChar>
    while (*str) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f4      	bne.n	8000b42 <UART1_SendString+0xa>
    }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <UART1_CharAvailable>:

uint8_t UART1_CharAvailable(void) {
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
    return USART1->SR & USART_SR_RXNE;
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <UART1_CharAvailable+0x18>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	b2db      	uxtb	r3, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	40013800 	.word	0x40013800

08000b80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <vApplicationGetIdleTaskMemory+0x28>)
 8000b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <vApplicationGetIdleTaskMemory+0x2c>)
 8000b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000274 	.word	0x20000274
 8000bac:	200002c8 	.word	0x200002c8

08000bb0 <main>:
osThreadDef(UART_Task, UART_Task, osPriorityNormal, 1, 512);  // 512 words = 2KB stack

osThreadId uartTaskHandle;

int main(void)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b09c      	sub	sp, #112	@ 0x70
 8000bb4:	af00      	add	r7, sp, #0
	UART1_Init();
 8000bb6:	f7ff ff59 	bl	8000a6c <UART1_Init>
   // HAL_Init();
    SystemClock_Config();
 8000bba:	f7ff fed7 	bl	800096c <SystemClock_Config>
    // CMSIS v1 initialization
    UART1_SendString("Initialized\r\n");
 8000bbe:	4828      	ldr	r0, [pc, #160]	@ (8000c60 <main+0xb0>)
 8000bc0:	f7ff ffba 	bl	8000b38 <UART1_SendString>
    osThreadDef(UART_Task, UART_Task, osPriorityNormal, 1, 512);
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <main+0xb4>)
 8000bc6:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000bca:	461d      	mov	r5, r3
 8000bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uartTaskHandle = osThreadCreate(osThread(UART_Task), NULL);
 8000bd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fba6 	bl	8001330 <osThreadCreate>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4a20      	ldr	r2, [pc, #128]	@ (8000c68 <main+0xb8>)
 8000be8:	6013      	str	r3, [r2, #0]

    // Inside main() after kernel init
    osThreadDef(DHT22_Task, DHT22_Task, osPriorityNormal, 1, 512);
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <main+0xbc>)
 8000bec:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    dht22TaskHandle = osThreadCreate(osThread(DHT22_Task), NULL);
 8000bfe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb93 	bl	8001330 <osThreadCreate>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a18      	ldr	r2, [pc, #96]	@ (8000c70 <main+0xc0>)
 8000c0e:	6013      	str	r3, [r2, #0]

    // Inside main() after kernel init
    osThreadDef(HCSR04_Task, HCSR04_Task, osPriorityNormal, 1, 512);
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <main+0xc4>)
 8000c12:	f107 041c 	add.w	r4, r7, #28
 8000c16:	461d      	mov	r5, r3
 8000c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    hcsr04TaskHandle = osThreadCreate(osThread(HCSR04_Task), NULL);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fb80 	bl	8001330 <osThreadCreate>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <main+0xc8>)
 8000c34:	6013      	str	r3, [r2, #0]

    // Inside main() after FreeRTOS kernel init and other tasks
    osThreadDef(Display_Task, Display_Task, osPriorityNormal, 1, 512);
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <main+0xcc>)
 8000c38:	463c      	mov	r4, r7
 8000c3a:	461d      	mov	r5, r3
 8000c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    displayTaskHandle = osThreadCreate(osThread(Display_Task), NULL);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fb6f 	bl	8001330 <osThreadCreate>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <main+0xd0>)
 8000c56:	6013      	str	r3, [r2, #0]


    osKernelStart();  // Only this is needed to start scheduler
 8000c58:	f000 fb63 	bl	8001322 <osKernelStart>

    while (1);
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <main+0xac>
 8000c60:	08003168 	.word	0x08003168
 8000c64:	08003178 	.word	0x08003178
 8000c68:	200004c8 	.word	0x200004c8
 8000c6c:	080031a0 	.word	0x080031a0
 8000c70:	20000518 	.word	0x20000518
 8000c74:	080031c8 	.word	0x080031c8
 8000c78:	20000520 	.word	0x20000520
 8000c7c:	080031f4 	.word	0x080031f4
 8000c80:	2000051c 	.word	0x2000051c

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <TIM1_UP_IRQHandler+0x10>)
 8000cbe:	f000 f9ea 	bl	8001096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200004cc 	.word	0x200004cc

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f001 fd1c 	bl	8002738 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20005000 	.word	0x20005000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000514 	.word	0x20000514
 8000d34:	200013e8 	.word	0x200013e8

08000d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <DHT22_Task>:
#include "uart-driver.h"
#include "stdio.h"

osThreadId dht22TaskHandle;

void DHT22_Task(void const *argument) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b094      	sub	sp, #80	@ 0x50
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    uint8_t temperature = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t humidity = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    char buffer[64];

    DHT22_Init();  // Initialize GPIO and pull-up
 8000d58:	f7ff fbcc 	bl	80004f4 <DHT22_Init>

    while (1) {
        if (DHT22_Read(&temperature, &humidity)) {
 8000d5c:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000d60:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fa5e 	bl	8000228 <DHT22_Read>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00a      	beq.n	8000d88 <DHT22_Task+0x44>
            sprintf(buffer, "Temp: %dC  Humidity: %d%%\r\n", temperature, humidity);
 8000d72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d76:	461a      	mov	r2, r3
 8000d78:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d7c:	f107 000c 	add.w	r0, r7, #12
 8000d80:	4909      	ldr	r1, [pc, #36]	@ (8000da8 <DHT22_Task+0x64>)
 8000d82:	f001 fcb1 	bl	80026e8 <siprintf>
 8000d86:	e005      	b.n	8000d94 <DHT22_Task+0x50>
        } else {
            sprintf(buffer, "DHT22 read failed\r\n");
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4907      	ldr	r1, [pc, #28]	@ (8000dac <DHT22_Task+0x68>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fcaa 	bl	80026e8 <siprintf>
        }
        UART1_SendString(buffer);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fecd 	bl	8000b38 <UART1_SendString>
        osDelay(5000);  // Read every 5 seconds
 8000d9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000da2:	f000 fb11 	bl	80013c8 <osDelay>
        if (DHT22_Read(&temperature, &humidity)) {
 8000da6:	e7d9      	b.n	8000d5c <DHT22_Task+0x18>
 8000da8:	08003210 	.word	0x08003210
 8000dac:	0800322c 	.word	0x0800322c

08000db0 <Display_Task>:
#include "hc_sr04-driver.h"
#include "stdio.h"

osThreadId displayTaskHandle;

void Display_Task(void const *argument) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    char line[32];
    uint32_t distance = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    SSD1306_Init();  // Initialize the OLED display
 8000dbc:	f7ff fcf6 	bl	80007ac <SSD1306_Init>

    while (1) {
        distance = HC_SR04_Read();  // Get distance (in cm)
 8000dc0:	f7ff fc02 	bl	80005c8 <HC_SR04_Read>
 8000dc4:	62f8      	str	r0, [r7, #44]	@ 0x2c

        SSD1306_Clear();
 8000dc6:	f7ff fd49 	bl	800085c <SSD1306_Clear>

        if (distance == 0) {
 8000dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10a      	bne.n	8000de6 <Display_Task+0x36>
            SSD1306_DisplayString(0, 0, "Distance:");
 8000dd0:	4a11      	ldr	r2, [pc, #68]	@ (8000e18 <Display_Task+0x68>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fd7f 	bl	80008d8 <SSD1306_DisplayString>
            SSD1306_DisplayString(1, 0, "Timeout/No object");
 8000dda:	4a10      	ldr	r2, [pc, #64]	@ (8000e1c <Display_Task+0x6c>)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fd7a 	bl	80008d8 <SSD1306_DisplayString>
 8000de4:	e012      	b.n	8000e0c <Display_Task+0x5c>
        } else {
            SSD1306_DisplayString(0, 0, "Distance:");
 8000de6:	4a0c      	ldr	r2, [pc, #48]	@ (8000e18 <Display_Task+0x68>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fd74 	bl	80008d8 <SSD1306_DisplayString>
            sprintf(line, "%lu cm", distance);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000df6:	490a      	ldr	r1, [pc, #40]	@ (8000e20 <Display_Task+0x70>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 fc75 	bl	80026e8 <siprintf>
            SSD1306_DisplayString(1, 0, line);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	461a      	mov	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fd66 	bl	80008d8 <SSD1306_DisplayString>
        }

        osDelay(2000);  // Update every 2 seconds
 8000e0c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e10:	f000 fada 	bl	80013c8 <osDelay>
        distance = HC_SR04_Read();  // Get distance (in cm)
 8000e14:	e7d4      	b.n	8000dc0 <Display_Task+0x10>
 8000e16:	bf00      	nop
 8000e18:	08003240 	.word	0x08003240
 8000e1c:	0800324c 	.word	0x0800324c
 8000e20:	08003260 	.word	0x08003260

08000e24 <HCSR04_Task>:
#include "uart-driver.h"
#include "stdio.h"

osThreadId hcsr04TaskHandle;

void HCSR04_Task(void const *argument) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	@ 0x50
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    uint32_t distance_cm = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char buffer[64];

    HC_SR04_Init();  // Set up GPIO for trigger and echo
 8000e30:	f7ff fb9e 	bl	8000570 <HC_SR04_Init>

    while (1) {
        distance_cm = HC_SR04_Read();
 8000e34:	f7ff fbc8 	bl	80005c8 <HC_SR04_Read>
 8000e38:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (distance_cm == 0) {
 8000e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d103      	bne.n	8000e48 <HCSR04_Task+0x24>
            UART1_SendString("HC-SR04 read timeout\r\n");
 8000e40:	480a      	ldr	r0, [pc, #40]	@ (8000e6c <HCSR04_Task+0x48>)
 8000e42:	f7ff fe79 	bl	8000b38 <UART1_SendString>
 8000e46:	e00b      	b.n	8000e60 <HCSR04_Task+0x3c>
        } else {
            sprintf(buffer, "Distance: %lu cm\r\n", distance_cm);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e4e:	4908      	ldr	r1, [pc, #32]	@ (8000e70 <HCSR04_Task+0x4c>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fc49 	bl	80026e8 <siprintf>
            UART1_SendString(buffer);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fe6c 	bl	8000b38 <UART1_SendString>
        }
        osDelay(2000);  // Sample every 2 seconds
 8000e60:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e64:	f000 fab0 	bl	80013c8 <osDelay>
        distance_cm = HC_SR04_Read();
 8000e68:	e7e4      	b.n	8000e34 <HCSR04_Task+0x10>
 8000e6a:	bf00      	nop
 8000e6c:	08003268 	.word	0x08003268
 8000e70:	08003280 	.word	0x08003280

08000e74 <UART_Task>:

char rx_buffer[32];
uint8_t rx_index = 0;
uint8_t temperature, humidity;

void UART_Task(void const *argument) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	@ 0x50
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    UART1_Init();
 8000e7c:	f7ff fdf6 	bl	8000a6c <UART1_Init>
    UART1_SendString("UART Task Started\r\n");
 8000e80:	485f      	ldr	r0, [pc, #380]	@ (8001000 <UART_Task+0x18c>)
 8000e82:	f7ff fe59 	bl	8000b38 <UART1_SendString>

    while (1) {
        char c = UART1_ReceiveChar();
 8000e86:	f7ff fe45 	bl	8000b14 <UART1_ReceiveChar>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        UART1_SendChar(c);  // Echo back
 8000e90:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe27 	bl	8000ae8 <UART1_SendChar>

        if (c == '\r') {
 8000e9a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e9e:	2b0d      	cmp	r3, #13
 8000ea0:	f040 809b 	bne.w	8000fda <UART_Task+0x166>
            rx_buffer[rx_index] = '\0';
 8000ea4:	4b57      	ldr	r3, [pc, #348]	@ (8001004 <UART_Task+0x190>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b57      	ldr	r3, [pc, #348]	@ (8001008 <UART_Task+0x194>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	5499      	strb	r1, [r3, r2]

            if (strcmp(rx_buffer, "TSTART") == 0) {
 8000eb0:	4956      	ldr	r1, [pc, #344]	@ (800100c <UART_Task+0x198>)
 8000eb2:	4855      	ldr	r0, [pc, #340]	@ (8001008 <UART_Task+0x194>)
 8000eb4:	f7ff f94c 	bl	8000150 <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d13d      	bne.n	8000f3a <UART_Task+0xc6>
                UART1_SendString("Temperature Monitoring Started\r\n");
 8000ebe:	4854      	ldr	r0, [pc, #336]	@ (8001010 <UART_Task+0x19c>)
 8000ec0:	f7ff fe3a 	bl	8000b38 <UART1_SendString>
                while (1) {
                    if (DHT22_Read(&temperature, &humidity)) {
 8000ec4:	4953      	ldr	r1, [pc, #332]	@ (8001014 <UART_Task+0x1a0>)
 8000ec6:	4854      	ldr	r0, [pc, #336]	@ (8001018 <UART_Task+0x1a4>)
 8000ec8:	f7ff f9ae 	bl	8000228 <DHT22_Read>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d021      	beq.n	8000f16 <UART_Task+0xa2>
                        char buf[64];
                        sprintf(buf, "Temp: %dC  Hum: %d%%\r\n", temperature, humidity);
 8000ed2:	4b51      	ldr	r3, [pc, #324]	@ (8001018 <UART_Task+0x1a4>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8001014 <UART_Task+0x1a0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f107 0008 	add.w	r0, r7, #8
 8000ee0:	494e      	ldr	r1, [pc, #312]	@ (800101c <UART_Task+0x1a8>)
 8000ee2:	f001 fc01 	bl	80026e8 <siprintf>
                        UART1_SendString(buf);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe24 	bl	8000b38 <UART1_SendString>

                        if (temperature > 30) {
 8000ef0:	4b49      	ldr	r3, [pc, #292]	@ (8001018 <UART_Task+0x1a4>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b1e      	cmp	r3, #30
 8000ef6:	d902      	bls.n	8000efe <UART_Task+0x8a>
                            BUZZER_ON();
 8000ef8:	f7ff fb22 	bl	8000540 <BUZZER_ON>
 8000efc:	e001      	b.n	8000f02 <UART_Task+0x8e>
                        } else {
                            BUZZER_OFF();
 8000efe:	f7ff fb2b 	bl	8000558 <BUZZER_OFF>
                        }

                        SSD1306_Clear();
 8000f02:	f7ff fcab 	bl	800085c <SSD1306_Clear>
                        SSD1306_DisplayString(0, 0, buf);
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fce2 	bl	80008d8 <SSD1306_DisplayString>
 8000f14:	e002      	b.n	8000f1c <UART_Task+0xa8>
                    } else {
                        UART1_SendString("DHT22 Error\r\n");
 8000f16:	4842      	ldr	r0, [pc, #264]	@ (8001020 <UART_Task+0x1ac>)
 8000f18:	f7ff fe0e 	bl	8000b38 <UART1_SendString>
                    }

                    osDelay(1000);
 8000f1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f20:	f000 fa52 	bl	80013c8 <osDelay>

                    if (UART1_CharAvailable()) {
 8000f24:	f7ff fe1e 	bl	8000b64 <UART1_CharAvailable>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0ca      	beq.n	8000ec4 <UART_Task+0x50>
                        UART1_SendString("Monitoring Stopped\r\n");
 8000f2e:	483d      	ldr	r0, [pc, #244]	@ (8001024 <UART_Task+0x1b0>)
 8000f30:	f7ff fe02 	bl	8000b38 <UART1_SendString>
                        BUZZER_OFF();
 8000f34:	f7ff fb10 	bl	8000558 <BUZZER_OFF>
                        break;
 8000f38:	e04b      	b.n	8000fd2 <UART_Task+0x15e>
                    }
                }
            }

            else if (strcmp(rx_buffer, "LED ON") == 0) {
 8000f3a:	493b      	ldr	r1, [pc, #236]	@ (8001028 <UART_Task+0x1b4>)
 8000f3c:	4832      	ldr	r0, [pc, #200]	@ (8001008 <UART_Task+0x194>)
 8000f3e:	f7ff f907 	bl	8000150 <strcmp>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <UART_Task+0xe0>
                LED_ON();
 8000f48:	f7ff fae2 	bl	8000510 <LED_ON>
                UART1_SendString("LED ON\r\n");
 8000f4c:	4837      	ldr	r0, [pc, #220]	@ (800102c <UART_Task+0x1b8>)
 8000f4e:	f7ff fdf3 	bl	8000b38 <UART1_SendString>
 8000f52:	e03e      	b.n	8000fd2 <UART_Task+0x15e>
            }

            else if (strcmp(rx_buffer, "LED OFF") == 0) {
 8000f54:	4936      	ldr	r1, [pc, #216]	@ (8001030 <UART_Task+0x1bc>)
 8000f56:	482c      	ldr	r0, [pc, #176]	@ (8001008 <UART_Task+0x194>)
 8000f58:	f7ff f8fa 	bl	8000150 <strcmp>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d105      	bne.n	8000f6e <UART_Task+0xfa>
                LED_OFF();
 8000f62:	f7ff fae1 	bl	8000528 <LED_OFF>
                UART1_SendString("LED OFF\r\n");
 8000f66:	4833      	ldr	r0, [pc, #204]	@ (8001034 <UART_Task+0x1c0>)
 8000f68:	f7ff fde6 	bl	8000b38 <UART1_SendString>
 8000f6c:	e031      	b.n	8000fd2 <UART_Task+0x15e>
            }

            else if (strcmp(rx_buffer, "DIST") == 0) {
 8000f6e:	4932      	ldr	r1, [pc, #200]	@ (8001038 <UART_Task+0x1c4>)
 8000f70:	4825      	ldr	r0, [pc, #148]	@ (8001008 <UART_Task+0x194>)
 8000f72:	f7ff f8ed 	bl	8000150 <strcmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d127      	bne.n	8000fcc <UART_Task+0x158>
                UART1_SendString("Distance Monitoring Started\r\n");
 8000f7c:	482f      	ldr	r0, [pc, #188]	@ (800103c <UART_Task+0x1c8>)
 8000f7e:	f7ff fddb 	bl	8000b38 <UART1_SendString>
                while (1) {
                    uint32_t dist = HC_SR04_Read();
 8000f82:	f7ff fb21 	bl	80005c8 <HC_SR04_Read>
 8000f86:	64b8      	str	r0, [r7, #72]	@ 0x48
                    char dist_buf[32];
                    sprintf(dist_buf, "Distance: %lu cm\r\n", dist);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000f8e:	492c      	ldr	r1, [pc, #176]	@ (8001040 <UART_Task+0x1cc>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fba9 	bl	80026e8 <siprintf>
                    UART1_SendString(dist_buf);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fdcc 	bl	8000b38 <UART1_SendString>
                    SSD1306_Clear();
 8000fa0:	f7ff fc5c 	bl	800085c <SSD1306_Clear>
                    SSD1306_DisplayString(0, 0, dist_buf);
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fc93 	bl	80008d8 <SSD1306_DisplayString>

                    osDelay(500);
 8000fb2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fb6:	f000 fa07 	bl	80013c8 <osDelay>

                    if (UART1_CharAvailable()) {
 8000fba:	f7ff fdd3 	bl	8000b64 <UART1_CharAvailable>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0de      	beq.n	8000f82 <UART_Task+0x10e>
                        UART1_SendString("Distance Monitoring Stopped\r\n");
 8000fc4:	481f      	ldr	r0, [pc, #124]	@ (8001044 <UART_Task+0x1d0>)
 8000fc6:	f7ff fdb7 	bl	8000b38 <UART1_SendString>
 8000fca:	e002      	b.n	8000fd2 <UART_Task+0x15e>
                    }
                }
            }

            else {
                UART1_SendString("Unknown Command\r\n");
 8000fcc:	481e      	ldr	r0, [pc, #120]	@ (8001048 <UART_Task+0x1d4>)
 8000fce:	f7ff fdb3 	bl	8000b38 <UART1_SendString>
            }

            rx_index = 0;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <UART_Task+0x190>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e00e      	b.n	8000ff8 <UART_Task+0x184>
        } else if (rx_index < sizeof(rx_buffer) - 1) {
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <UART_Task+0x190>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b1e      	cmp	r3, #30
 8000fe0:	d80a      	bhi.n	8000ff8 <UART_Task+0x184>
            rx_buffer[rx_index++] = c;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <UART_Task+0x190>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	b2d1      	uxtb	r1, r2
 8000fea:	4a06      	ldr	r2, [pc, #24]	@ (8001004 <UART_Task+0x190>)
 8000fec:	7011      	strb	r1, [r2, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4a05      	ldr	r2, [pc, #20]	@ (8001008 <UART_Task+0x194>)
 8000ff2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000ff6:	5453      	strb	r3, [r2, r1]
        }

        osDelay(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f000 f9e5 	bl	80013c8 <osDelay>
    while (1) {
 8000ffe:	e742      	b.n	8000e86 <UART_Task+0x12>
 8001000:	08003294 	.word	0x08003294
 8001004:	20000544 	.word	0x20000544
 8001008:	20000524 	.word	0x20000524
 800100c:	080032a8 	.word	0x080032a8
 8001010:	080032b0 	.word	0x080032b0
 8001014:	20000546 	.word	0x20000546
 8001018:	20000545 	.word	0x20000545
 800101c:	080032d4 	.word	0x080032d4
 8001020:	080032ec 	.word	0x080032ec
 8001024:	080032fc 	.word	0x080032fc
 8001028:	08003314 	.word	0x08003314
 800102c:	0800331c 	.word	0x0800331c
 8001030:	08003328 	.word	0x08003328
 8001034:	08003330 	.word	0x08003330
 8001038:	0800333c 	.word	0x0800333c
 800103c:	08003344 	.word	0x08003344
 8001040:	08003364 	.word	0x08003364
 8001044:	08003378 	.word	0x08003378
 8001048:	08003398 	.word	0x08003398

0800104c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800104c:	f7ff fe74 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001052:	490c      	ldr	r1, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a09      	ldr	r2, [pc, #36]	@ (800108c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001068:	4c09      	ldr	r4, [pc, #36]	@ (8001090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f001 fb65 	bl	8002744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107a:	f7ff fd99 	bl	8000bb0 <main>
  bx lr
 800107e:	4770      	bx	lr
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001088:	0800363c 	.word	0x0800363c
  ldr r2, =_sbss
 800108c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001090:	200013e4 	.word	0x200013e4

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>

08001096 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d020      	beq.n	80010fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d01b      	beq.n	80010fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f06f 0202 	mvn.w	r2, #2
 80010ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f8da 	bl	800129a <HAL_TIM_IC_CaptureCallback>
 80010e6:	e005      	b.n	80010f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f8cd 	bl	8001288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f8dc 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01b      	beq.n	8001146 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f06f 0204 	mvn.w	r2, #4
 8001116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2202      	movs	r2, #2
 800111c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f8b4 	bl	800129a <HAL_TIM_IC_CaptureCallback>
 8001132:	e005      	b.n	8001140 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f8a7 	bl	8001288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f8b6 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d020      	beq.n	8001192 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d01b      	beq.n	8001192 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f06f 0208 	mvn.w	r2, #8
 8001162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2204      	movs	r2, #4
 8001168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f88e 	bl	800129a <HAL_TIM_IC_CaptureCallback>
 800117e:	e005      	b.n	800118c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f881 	bl	8001288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f890 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01b      	beq.n	80011de <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f06f 0210 	mvn.w	r2, #16
 80011ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2208      	movs	r2, #8
 80011b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f868 	bl	800129a <HAL_TIM_IC_CaptureCallback>
 80011ca:	e005      	b.n	80011d8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f85b 	bl	8001288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f86a 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00c      	beq.n	8001202 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f06f 0201 	mvn.w	r2, #1
 80011fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f83a 	bl	8001276 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800121e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f85e 	bl	80012e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00c      	beq.n	800124a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f83a 	bl	80012be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00c      	beq.n	800126e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0220 	mvn.w	r2, #32
 8001266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f831 	bl	80012d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001306:	2b84      	cmp	r3, #132	@ 0x84
 8001308:	d005      	beq.n	8001316 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800130a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	3303      	adds	r3, #3
 8001314:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001326:	f000 fadf 	bl	80018e8 <vTaskStartScheduler>
  
  return osOK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}

08001330 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af04      	add	r7, sp, #16
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d020      	beq.n	8001384 <osThreadCreate+0x54>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d01c      	beq.n	8001384 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685c      	ldr	r4, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691e      	ldr	r6, [r3, #16]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffc9 	bl	80012f4 <makeFreeRtosPriority>
 8001362:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800136c:	9202      	str	r2, [sp, #8]
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	9100      	str	r1, [sp, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4632      	mov	r2, r6
 8001376:	4629      	mov	r1, r5
 8001378:	4620      	mov	r0, r4
 800137a:	f000 f8e8 	bl	800154e <xTaskCreateStatic>
 800137e:	4603      	mov	r3, r0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	e01c      	b.n	80013be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685c      	ldr	r4, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001390:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffab 	bl	80012f4 <makeFreeRtosPriority>
 800139e:	4602      	mov	r2, r0
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9200      	str	r2, [sp, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4632      	mov	r2, r6
 80013ac:	4629      	mov	r1, r5
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 f92d 	bl	800160e <xTaskCreate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <osDelay+0x16>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	e000      	b.n	80013e0 <osDelay+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fa4b 	bl	800187c <vTaskDelay>
  
  return osOK;
 80013e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f103 0208 	add.w	r2, r3, #8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f103 0208 	add.w	r2, r3, #8
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f103 0208 	add.w	r2, r3, #8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a2:	d103      	bne.n	80014ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	e00c      	b.n	80014c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3308      	adds	r3, #8
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e002      	b.n	80014ba <vListInsert+0x2e>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d2f6      	bcs.n	80014b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6892      	ldr	r2, [r2, #8]
 8001512:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6852      	ldr	r2, [r2, #4]
 800151c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d103      	bne.n	8001530 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800154e:	b580      	push	{r7, lr}
 8001550:	b08e      	sub	sp, #56	@ 0x38
 8001552:	af04      	add	r7, sp, #16
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800155c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10b      	bne.n	800157a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001566:	f383 8811 	msr	BASEPRI, r3
 800156a:	f3bf 8f6f 	isb	sy
 800156e:	f3bf 8f4f 	dsb	sy
 8001572:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	e7fd      	b.n	8001576 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800157a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10b      	bne.n	8001598 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	61fb      	str	r3, [r7, #28]
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001598:	2354      	movs	r3, #84	@ 0x54
 800159a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b54      	cmp	r3, #84	@ 0x54
 80015a0:	d00b      	beq.n	80015ba <xTaskCreateStatic+0x6c>
	__asm volatile
 80015a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	f3bf 8f6f 	isb	sy
 80015ae:	f3bf 8f4f 	dsb	sy
 80015b2:	61bb      	str	r3, [r7, #24]
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	e7fd      	b.n	80015b6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80015ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80015bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01e      	beq.n	8001600 <xTaskCreateStatic+0xb2>
 80015c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d01b      	beq.n	8001600 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80015c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	2202      	movs	r2, #2
 80015d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80015da:	2300      	movs	r3, #0
 80015dc:	9303      	str	r3, [sp, #12]
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 f850 	bl	8001698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80015f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015fa:	f000 f8d5 	bl	80017a8 <prvAddNewTaskToReadyList>
 80015fe:	e001      	b.n	8001604 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001604:	697b      	ldr	r3, [r7, #20]
	}
 8001606:	4618      	mov	r0, r3
 8001608:	3728      	adds	r7, #40	@ 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800160e:	b580      	push	{r7, lr}
 8001610:	b08c      	sub	sp, #48	@ 0x30
 8001612:	af04      	add	r7, sp, #16
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4613      	mov	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fe74 	bl	8002310 <pvPortMalloc>
 8001628:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00e      	beq.n	800164e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001630:	2054      	movs	r0, #84	@ 0x54
 8001632:	f000 fe6d 	bl	8002310 <pvPortMalloc>
 8001636:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	631a      	str	r2, [r3, #48]	@ 0x30
 8001644:	e005      	b.n	8001652 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f000 ff30 	bl	80024ac <vPortFree>
 800164c:	e001      	b.n	8001652 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d017      	beq.n	8001688 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	2300      	movs	r3, #0
 8001664:	9303      	str	r3, [sp, #12]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f80e 	bl	8001698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800167c:	69f8      	ldr	r0, [r7, #28]
 800167e:	f000 f893 	bl	80017a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	e002      	b.n	800168e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800168e:	69bb      	ldr	r3, [r7, #24]
	}
 8001690:	4618      	mov	r0, r3
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016b0:	3b01      	subs	r3, #1
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f023 0307 	bic.w	r3, r3, #7
 80016be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80016ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016ce:	f383 8811 	msr	BASEPRI, r3
 80016d2:	f3bf 8f6f 	isb	sy
 80016d6:	f3bf 8f4f 	dsb	sy
 80016da:	617b      	str	r3, [r7, #20]
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	e7fd      	b.n	80016de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01f      	beq.n	8001728 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	e012      	b.n	8001714 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	7819      	ldrb	r1, [r3, #0]
 80016f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4413      	add	r3, r2
 80016fc:	3334      	adds	r3, #52	@ 0x34
 80016fe:	460a      	mov	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d9e9      	bls.n	80016ee <prvInitialiseNewTask+0x56>
 800171a:	e000      	b.n	800171e <prvInitialiseNewTask+0x86>
			{
				break;
 800171c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800171e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001726:	e003      	b.n	8001730 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001732:	2b06      	cmp	r3, #6
 8001734:	d901      	bls.n	800173a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001736:	2306      	movs	r3, #6
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800173a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800173c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800173e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001744:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001748:	2200      	movs	r2, #0
 800174a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800174c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174e:	3304      	adds	r3, #4
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fe6c 	bl	800142e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001758:	3318      	adds	r3, #24
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe67 	bl	800142e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001764:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001768:	f1c3 0207 	rsb	r2, r3, #7
 800176c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001778:	2200      	movs	r2, #0
 800177a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800177c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	69b8      	ldr	r0, [r7, #24]
 800178a:	f000 fc0d 	bl	8001fa8 <pxPortInitialiseStack>
 800178e:	4602      	mov	r2, r0
 8001790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001792:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800179a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800179e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017b0:	f000 fcec 	bl	800218c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <prvAddNewTaskToReadyList+0xb8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <prvAddNewTaskToReadyList+0xb8>)
 80017bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017c6:	4a27      	ldr	r2, [pc, #156]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <prvAddNewTaskToReadyList+0xb8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d110      	bne.n	80017f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017d4:	f000 fac4 	bl	8001d60 <prvInitialiseTaskLists>
 80017d8:	e00d      	b.n	80017f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017da:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <prvAddNewTaskToReadyList+0xc0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d802      	bhi.n	80017f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80017f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <prvAddNewTaskToReadyList+0xc4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a1b      	ldr	r2, [pc, #108]	@ (800186c <prvAddNewTaskToReadyList+0xc4>)
 80017fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	2201      	movs	r2, #1
 8001806:	409a      	lsls	r2, r3
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <prvAddNewTaskToReadyList+0xc8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4313      	orrs	r3, r2
 800180e:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <prvAddNewTaskToReadyList+0xc8>)
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4a15      	ldr	r2, [pc, #84]	@ (8001874 <prvAddNewTaskToReadyList+0xcc>)
 8001820:	441a      	add	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f7ff fe0c 	bl	8001446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800182e:	f000 fcdd 	bl	80021ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <prvAddNewTaskToReadyList+0xc0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00e      	beq.n	8001858 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <prvAddNewTaskToReadyList+0xd0>)
 800184a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000648 	.word	0x20000648
 8001864:	20000548 	.word	0x20000548
 8001868:	20000654 	.word	0x20000654
 800186c:	20000664 	.word	0x20000664
 8001870:	20000650 	.word	0x20000650
 8001874:	2000054c 	.word	0x2000054c
 8001878:	e000ed04 	.word	0xe000ed04

0800187c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d018      	beq.n	80018c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <vTaskDelay+0x64>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <vTaskDelay+0x32>
	__asm volatile
 8001896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800189a:	f383 8811 	msr	BASEPRI, r3
 800189e:	f3bf 8f6f 	isb	sy
 80018a2:	f3bf 8f4f 	dsb	sy
 80018a6:	60bb      	str	r3, [r7, #8]
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	e7fd      	b.n	80018aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80018ae:	f000 f87d 	bl	80019ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018b2:	2100      	movs	r1, #0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fb11 	bl	8001edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80018ba:	f000 f885 	bl	80019c8 <xTaskResumeAll>
 80018be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <vTaskDelay+0x68>)
 80018c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000670 	.word	0x20000670
 80018e4:	e000ed04 	.word	0xe000ed04

080018e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80018f6:	463a      	mov	r2, r7
 80018f8:	1d39      	adds	r1, r7, #4
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f93e 	bl	8000b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	9202      	str	r2, [sp, #8]
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	460a      	mov	r2, r1
 8001916:	491f      	ldr	r1, [pc, #124]	@ (8001994 <vTaskStartScheduler+0xac>)
 8001918:	481f      	ldr	r0, [pc, #124]	@ (8001998 <vTaskStartScheduler+0xb0>)
 800191a:	f7ff fe18 	bl	800154e <xTaskCreateStatic>
 800191e:	4603      	mov	r3, r0
 8001920:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <vTaskStartScheduler+0xb4>)
 8001922:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <vTaskStartScheduler+0xb4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800192c:	2301      	movs	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e001      	b.n	8001936 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d116      	bne.n	800196a <vTaskStartScheduler+0x82>
	__asm volatile
 800193c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001940:	f383 8811 	msr	BASEPRI, r3
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	613b      	str	r3, [r7, #16]
}
 800194e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <vTaskStartScheduler+0xb8>)
 8001952:	f04f 32ff 	mov.w	r2, #4294967295
 8001956:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <vTaskStartScheduler+0xbc>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800195e:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <vTaskStartScheduler+0xc0>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001964:	f000 fba0 	bl	80020a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001968:	e00f      	b.n	800198a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d10b      	bne.n	800198a <vTaskStartScheduler+0xa2>
	__asm volatile
 8001972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001976:	f383 8811 	msr	BASEPRI, r3
 800197a:	f3bf 8f6f 	isb	sy
 800197e:	f3bf 8f4f 	dsb	sy
 8001982:	60fb      	str	r3, [r7, #12]
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	e7fd      	b.n	8001986 <vTaskStartScheduler+0x9e>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	080033ac 	.word	0x080033ac
 8001998:	08001d31 	.word	0x08001d31
 800199c:	2000066c 	.word	0x2000066c
 80019a0:	20000668 	.word	0x20000668
 80019a4:	20000654 	.word	0x20000654
 80019a8:	2000064c 	.word	0x2000064c

080019ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <vTaskSuspendAll+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a03      	ldr	r2, [pc, #12]	@ (80019c4 <vTaskSuspendAll+0x18>)
 80019b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000670 	.word	0x20000670

080019c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80019d6:	4b42      	ldr	r3, [pc, #264]	@ (8001ae0 <xTaskResumeAll+0x118>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10b      	bne.n	80019f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80019de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
 80019ee:	603b      	str	r3, [r7, #0]
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	e7fd      	b.n	80019f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80019f6:	f000 fbc9 	bl	800218c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80019fa:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <xTaskResumeAll+0x118>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	4a37      	ldr	r2, [pc, #220]	@ (8001ae0 <xTaskResumeAll+0x118>)
 8001a02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a04:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <xTaskResumeAll+0x118>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d161      	bne.n	8001ad0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <xTaskResumeAll+0x11c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05d      	beq.n	8001ad0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a14:	e02e      	b.n	8001a74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <xTaskResumeAll+0x120>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3318      	adds	r3, #24
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fd6a 	bl	80014fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fd65 	bl	80014fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <xTaskResumeAll+0x124>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	4a2a      	ldr	r2, [pc, #168]	@ (8001aec <xTaskResumeAll+0x124>)
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4a27      	ldr	r2, [pc, #156]	@ (8001af0 <xTaskResumeAll+0x128>)
 8001a52:	441a      	add	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3304      	adds	r3, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f7ff fcf3 	bl	8001446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <xTaskResumeAll+0x12c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d302      	bcc.n	8001a74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <xTaskResumeAll+0x130>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <xTaskResumeAll+0x120>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1cc      	bne.n	8001a16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a82:	f000 fa0b 	bl	8001e9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <xTaskResumeAll+0x134>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a92:	f000 f837 	bl	8001b04 <xTaskIncrementTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <xTaskResumeAll+0x130>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f1      	bne.n	8001a92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <xTaskResumeAll+0x134>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <xTaskResumeAll+0x130>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <xTaskResumeAll+0x138>)
 8001ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ad0:	f000 fb8c 	bl	80021ec <vPortExitCritical>

	return xAlreadyYielded;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000670 	.word	0x20000670
 8001ae4:	20000648 	.word	0x20000648
 8001ae8:	20000608 	.word	0x20000608
 8001aec:	20000650 	.word	0x20000650
 8001af0:	2000054c 	.word	0x2000054c
 8001af4:	20000548 	.word	0x20000548
 8001af8:	2000065c 	.word	0x2000065c
 8001afc:	20000658 	.word	0x20000658
 8001b00:	e000ed04 	.word	0xe000ed04

08001b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c4c <xTaskIncrementTick+0x148>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 808f 	bne.w	8001c36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b18:	4b4d      	ldr	r3, [pc, #308]	@ (8001c50 <xTaskIncrementTick+0x14c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b20:	4a4b      	ldr	r2, [pc, #300]	@ (8001c50 <xTaskIncrementTick+0x14c>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d121      	bne.n	8001b70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b2c:	4b49      	ldr	r3, [pc, #292]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8001b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b3a:	f383 8811 	msr	BASEPRI, r3
 8001b3e:	f3bf 8f6f 	isb	sy
 8001b42:	f3bf 8f4f 	dsb	sy
 8001b46:	603b      	str	r3, [r7, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <xTaskIncrementTick+0x46>
 8001b4e:	4b41      	ldr	r3, [pc, #260]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b40      	ldr	r3, [pc, #256]	@ (8001c58 <xTaskIncrementTick+0x154>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3e      	ldr	r2, [pc, #248]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c58 <xTaskIncrementTick+0x154>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b3e      	ldr	r3, [pc, #248]	@ (8001c5c <xTaskIncrementTick+0x158>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a3c      	ldr	r2, [pc, #240]	@ (8001c5c <xTaskIncrementTick+0x158>)
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	f000 f996 	bl	8001e9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b70:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <xTaskIncrementTick+0x15c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d348      	bcc.n	8001c0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b7a:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b84:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <xTaskIncrementTick+0x15c>)
 8001b86:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8a:	601a      	str	r2, [r3, #0]
					break;
 8001b8c:	e03e      	b.n	8001c0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b8e:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d203      	bcs.n	8001bae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c60 <xTaskIncrementTick+0x15c>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001bac:	e02e      	b.n	8001c0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fca2 	bl	80014fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fc99 	bl	80014fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	2201      	movs	r2, #1
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <xTaskIncrementTick+0x160>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <xTaskIncrementTick+0x160>)
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <xTaskIncrementTick+0x164>)
 8001bea:	441a      	add	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f7ff fc27 	bl	8001446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <xTaskIncrementTick+0x168>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3b9      	bcc.n	8001b7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c0a:	e7b6      	b.n	8001b7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <xTaskIncrementTick+0x168>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c12:	4915      	ldr	r1, [pc, #84]	@ (8001c68 <xTaskIncrementTick+0x164>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d901      	bls.n	8001c28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <xTaskIncrementTick+0x16c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001c30:	2301      	movs	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e004      	b.n	8001c40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <xTaskIncrementTick+0x170>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <xTaskIncrementTick+0x170>)
 8001c3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c40:	697b      	ldr	r3, [r7, #20]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000670 	.word	0x20000670
 8001c50:	2000064c 	.word	0x2000064c
 8001c54:	20000600 	.word	0x20000600
 8001c58:	20000604 	.word	0x20000604
 8001c5c:	20000660 	.word	0x20000660
 8001c60:	20000668 	.word	0x20000668
 8001c64:	20000650 	.word	0x20000650
 8001c68:	2000054c 	.word	0x2000054c
 8001c6c:	20000548 	.word	0x20000548
 8001c70:	2000065c 	.word	0x2000065c
 8001c74:	20000658 	.word	0x20000658

08001c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c7e:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <vTaskSwitchContext+0xa4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c86:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <vTaskSwitchContext+0xa8>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c8c:	e040      	b.n	8001d10 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <vTaskSwitchContext+0xa8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c94:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <vTaskSwitchContext+0xac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	f1c3 031f 	rsb	r3, r3, #31
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	491f      	ldr	r1, [pc, #124]	@ (8001d28 <vTaskSwitchContext+0xb0>)
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10b      	bne.n	8001cd6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8001cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	607b      	str	r3, [r7, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	e7fd      	b.n	8001cd2 <vTaskSwitchContext+0x5a>
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <vTaskSwitchContext+0xb0>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d104      	bne.n	8001d06 <vTaskSwitchContext+0x8e>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <vTaskSwitchContext+0xb4>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000670 	.word	0x20000670
 8001d20:	2000065c 	.word	0x2000065c
 8001d24:	20000650 	.word	0x20000650
 8001d28:	2000054c 	.word	0x2000054c
 8001d2c:	20000548 	.word	0x20000548

08001d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001d38:	f000 f852 	bl	8001de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <prvIdleTask+0x28>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d9f9      	bls.n	8001d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <prvIdleTask+0x2c>)
 8001d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001d54:	e7f0      	b.n	8001d38 <prvIdleTask+0x8>
 8001d56:	bf00      	nop
 8001d58:	2000054c 	.word	0x2000054c
 8001d5c:	e000ed04 	.word	0xe000ed04

08001d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e00c      	b.n	8001d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <prvInitialiseTaskLists+0x60>)
 8001d78:	4413      	add	r3, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fb38 	bl	80013f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3301      	adds	r3, #1
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d9ef      	bls.n	8001d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001d8c:	480d      	ldr	r0, [pc, #52]	@ (8001dc4 <prvInitialiseTaskLists+0x64>)
 8001d8e:	f7ff fb2f 	bl	80013f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <prvInitialiseTaskLists+0x68>)
 8001d94:	f7ff fb2c 	bl	80013f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <prvInitialiseTaskLists+0x6c>)
 8001d9a:	f7ff fb29 	bl	80013f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001d9e:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <prvInitialiseTaskLists+0x70>)
 8001da0:	f7ff fb26 	bl	80013f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001da4:	480b      	ldr	r0, [pc, #44]	@ (8001dd4 <prvInitialiseTaskLists+0x74>)
 8001da6:	f7ff fb23 	bl	80013f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <prvInitialiseTaskLists+0x78>)
 8001dac:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <prvInitialiseTaskLists+0x64>)
 8001dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <prvInitialiseTaskLists+0x7c>)
 8001db2:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <prvInitialiseTaskLists+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000054c 	.word	0x2000054c
 8001dc4:	200005d8 	.word	0x200005d8
 8001dc8:	200005ec 	.word	0x200005ec
 8001dcc:	20000608 	.word	0x20000608
 8001dd0:	2000061c 	.word	0x2000061c
 8001dd4:	20000634 	.word	0x20000634
 8001dd8:	20000600 	.word	0x20000600
 8001ddc:	20000604 	.word	0x20000604

08001de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001de6:	e019      	b.n	8001e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001de8:	f000 f9d0 	bl	800218c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dec:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <prvCheckTasksWaitingTermination+0x50>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fb7f 	bl	80014fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <prvCheckTasksWaitingTermination+0x54>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	4a0b      	ldr	r2, [pc, #44]	@ (8001e34 <prvCheckTasksWaitingTermination+0x54>)
 8001e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <prvCheckTasksWaitingTermination+0x58>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <prvCheckTasksWaitingTermination+0x58>)
 8001e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001e12:	f000 f9eb 	bl	80021ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f810 	bl	8001e3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <prvCheckTasksWaitingTermination+0x58>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e1      	bne.n	8001de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000061c 	.word	0x2000061c
 8001e34:	20000648 	.word	0x20000648
 8001e38:	20000630 	.word	0x20000630

08001e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d108      	bne.n	8001e60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fb2a 	bl	80024ac <vPortFree>
				vPortFree( pxTCB );
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb27 	bl	80024ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001e5e:	e019      	b.n	8001e94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d103      	bne.n	8001e72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fb1e 	bl	80024ac <vPortFree>
	}
 8001e70:	e010      	b.n	8001e94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d00b      	beq.n	8001e94 <prvDeleteTCB+0x58>
	__asm volatile
 8001e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	60fb      	str	r3, [r7, #12]
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <prvDeleteTCB+0x54>
	}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <prvResetNextTaskUnblockTime+0x38>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8001eae:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001eb4:	e008      	b.n	8001ec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <prvResetNextTaskUnblockTime+0x38>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000600 	.word	0x20000600
 8001ed8:	20000668 	.word	0x20000668

08001edc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fb02 	bl	80014fc <uxListRemove>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001efe:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	2201      	movs	r2, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4013      	ands	r3, r2
 8001f12:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d10a      	bne.n	8001f34 <prvAddCurrentTaskToDelayedList+0x58>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f24:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481a      	ldr	r0, [pc, #104]	@ (8001f98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001f2e:	f7ff fa8a 	bl	8001446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f32:	e026      	b.n	8001f82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f3c:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d209      	bcs.n	8001f60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f4c:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3304      	adds	r3, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7ff fa97 	bl	800148c <vListInsert>
}
 8001f5e:	e010      	b.n	8001f82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f7ff fa8d 	bl	800148c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001f72:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d202      	bcs.n	8001f82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001f7c:	4a09      	ldr	r2, [pc, #36]	@ (8001fa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	6013      	str	r3, [r2, #0]
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000064c 	.word	0x2000064c
 8001f90:	20000548 	.word	0x20000548
 8001f94:	20000650 	.word	0x20000650
 8001f98:	20000634 	.word	0x20000634
 8001f9c:	20000604 	.word	0x20000604
 8001fa0:	20000600 	.word	0x20000600
 8001fa4:	20000668 	.word	0x20000668

08001fa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3b04      	subs	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f023 0201 	bic.w	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3b04      	subs	r3, #4
 8001fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001fd8:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <pxPortInitialiseStack+0x54>)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3b14      	subs	r3, #20
 8001fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3b20      	subs	r3, #32
 8001fee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	08002001 	.word	0x08002001

08002000 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <prvTaskExitError+0x54>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d00b      	beq.n	800202c <prvTaskExitError+0x2c>
	__asm volatile
 8002014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	60fb      	str	r3, [r7, #12]
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <prvTaskExitError+0x28>
	__asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	60bb      	str	r3, [r7, #8]
}
 800203e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002040:	bf00      	nop
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0fc      	beq.n	8002042 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000004 	.word	0x20000004
	...

08002060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <pxCurrentTCBConst2>)
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	6808      	ldr	r0, [r1, #0]
 8002066:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800206a:	f380 8809 	msr	PSP, r0
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	f380 8811 	msr	BASEPRI, r0
 800207a:	f04e 0e0d 	orr.w	lr, lr, #13
 800207e:	4770      	bx	lr

08002080 <pxCurrentTCBConst2>:
 8002080:	20000548 	.word	0x20000548
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop

08002088 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002088:	4806      	ldr	r0, [pc, #24]	@ (80020a4 <prvPortStartFirstTask+0x1c>)
 800208a:	6800      	ldr	r0, [r0, #0]
 800208c:	6800      	ldr	r0, [r0, #0]
 800208e:	f380 8808 	msr	MSP, r0
 8002092:	b662      	cpsie	i
 8002094:	b661      	cpsie	f
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	df00      	svc	0
 80020a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80020a2:	bf00      	nop
 80020a4:	e000ed08 	.word	0xe000ed08

080020a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80020ae:	4b32      	ldr	r3, [pc, #200]	@ (8002178 <xPortStartScheduler+0xd0>)
 80020b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	22ff      	movs	r2, #255	@ 0xff
 80020be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <xPortStartScheduler+0xd4>)
 80020d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80020d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002180 <xPortStartScheduler+0xd8>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020dc:	e009      	b.n	80020f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80020de:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <xPortStartScheduler+0xd8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	4a26      	ldr	r2, [pc, #152]	@ (8002180 <xPortStartScheduler+0xd8>)
 80020e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	2b80      	cmp	r3, #128	@ 0x80
 80020fc:	d0ef      	beq.n	80020de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80020fe:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <xPortStartScheduler+0xd8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	d00b      	beq.n	8002122 <xPortStartScheduler+0x7a>
	__asm volatile
 800210a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	60bb      	str	r3, [r7, #8]
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	e7fd      	b.n	800211e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002122:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <xPortStartScheduler+0xd8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	4a15      	ldr	r2, [pc, #84]	@ (8002180 <xPortStartScheduler+0xd8>)
 800212a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800212c:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <xPortStartScheduler+0xd8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002134:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <xPortStartScheduler+0xd8>)
 8002136:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002140:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <xPortStartScheduler+0xdc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0f      	ldr	r2, [pc, #60]	@ (8002184 <xPortStartScheduler+0xdc>)
 8002146:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800214a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800214c:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <xPortStartScheduler+0xdc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <xPortStartScheduler+0xdc>)
 8002152:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002156:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002158:	f000 f8b8 	bl	80022cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800215c:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <xPortStartScheduler+0xe0>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002162:	f7ff ff91 	bl	8002088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002166:	f7ff fd87 	bl	8001c78 <vTaskSwitchContext>
	prvTaskExitError();
 800216a:	f7ff ff49 	bl	8002000 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	e000e400 	.word	0xe000e400
 800217c:	20000674 	.word	0x20000674
 8002180:	20000678 	.word	0x20000678
 8002184:	e000ed20 	.word	0xe000ed20
 8002188:	20000004 	.word	0x20000004

0800218c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
	__asm volatile
 8002192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002196:	f383 8811 	msr	BASEPRI, r3
 800219a:	f3bf 8f6f 	isb	sy
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	607b      	str	r3, [r7, #4]
}
 80021a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80021a6:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <vPortEnterCritical+0x58>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <vPortEnterCritical+0x58>)
 80021ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <vPortEnterCritical+0x58>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d110      	bne.n	80021da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80021b8:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <vPortEnterCritical+0x5c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <vPortEnterCritical+0x4e>
	__asm volatile
 80021c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	603b      	str	r3, [r7, #0]
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	e7fd      	b.n	80021d6 <vPortEnterCritical+0x4a>
	}
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000004 	.word	0x20000004
 80021e8:	e000ed04 	.word	0xe000ed04

080021ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <vPortExitCritical+0x50>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10b      	bne.n	8002212 <vPortExitCritical+0x26>
	__asm volatile
 80021fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	607b      	str	r3, [r7, #4]
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	e7fd      	b.n	800220e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <vPortExitCritical+0x50>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3b01      	subs	r3, #1
 8002218:	4a08      	ldr	r2, [pc, #32]	@ (800223c <vPortExitCritical+0x50>)
 800221a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <vPortExitCritical+0x50>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <vPortExitCritical+0x44>
 8002224:	2300      	movs	r3, #0
 8002226:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800222e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000004 	.word	0x20000004

08002240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002240:	f3ef 8009 	mrs	r0, PSP
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <pxCurrentTCBConst>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002250:	6010      	str	r0, [r2, #0]
 8002252:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002256:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800225a:	f380 8811 	msr	BASEPRI, r0
 800225e:	f7ff fd0b 	bl	8001c78 <vTaskSwitchContext>
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f380 8811 	msr	BASEPRI, r0
 800226a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	6808      	ldr	r0, [r1, #0]
 8002272:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002276:	f380 8809 	msr	PSP, r0
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	4770      	bx	lr

08002280 <pxCurrentTCBConst>:
 8002280:	20000548 	.word	0x20000548
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop

08002288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
	__asm volatile
 800228e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	607b      	str	r3, [r7, #4]
}
 80022a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80022a2:	f7ff fc2f 	bl	8001b04 <xTaskIncrementTick>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <SysTick_Handler+0x40>)
 80022ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f383 8811 	msr	BASEPRI, r3
}
 80022be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	e000ed04 	.word	0xe000ed04

080022cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <vPortSetupTimerInterrupt+0x30>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <vPortSetupTimerInterrupt+0x34>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <vPortSetupTimerInterrupt+0x38>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <vPortSetupTimerInterrupt+0x3c>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	4a08      	ldr	r2, [pc, #32]	@ (800230c <vPortSetupTimerInterrupt+0x40>)
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022ee:	4b03      	ldr	r3, [pc, #12]	@ (80022fc <vPortSetupTimerInterrupt+0x30>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	e000e010 	.word	0xe000e010
 8002300:	e000e018 	.word	0xe000e018
 8002304:	20000000 	.word	0x20000000
 8002308:	10624dd3 	.word	0x10624dd3
 800230c:	e000e014 	.word	0xe000e014

08002310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800231c:	f7ff fb46 	bl	80019ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002320:	4b5c      	ldr	r3, [pc, #368]	@ (8002494 <pvPortMalloc+0x184>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002328:	f000 f924 	bl	8002574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800232c:	4b5a      	ldr	r3, [pc, #360]	@ (8002498 <pvPortMalloc+0x188>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 8095 	bne.w	8002464 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01e      	beq.n	800237e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002340:	2208      	movs	r2, #8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	2b00      	cmp	r3, #0
 8002350:	d015      	beq.n	800237e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f023 0307 	bic.w	r3, r3, #7
 8002358:	3308      	adds	r3, #8
 800235a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <pvPortMalloc+0x6e>
	__asm volatile
 8002366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800236a:	f383 8811 	msr	BASEPRI, r3
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	617b      	str	r3, [r7, #20]
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	e7fd      	b.n	800237a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d06f      	beq.n	8002464 <pvPortMalloc+0x154>
 8002384:	4b45      	ldr	r3, [pc, #276]	@ (800249c <pvPortMalloc+0x18c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	d86a      	bhi.n	8002464 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800238e:	4b44      	ldr	r3, [pc, #272]	@ (80024a0 <pvPortMalloc+0x190>)
 8002390:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002392:	4b43      	ldr	r3, [pc, #268]	@ (80024a0 <pvPortMalloc+0x190>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002398:	e004      	b.n	80023a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d903      	bls.n	80023b6 <pvPortMalloc+0xa6>
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f1      	bne.n	800239a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80023b6:	4b37      	ldr	r3, [pc, #220]	@ (8002494 <pvPortMalloc+0x184>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023bc:	429a      	cmp	r2, r3
 80023be:	d051      	beq.n	8002464 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2208      	movs	r2, #8
 80023c6:	4413      	add	r3, r2
 80023c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	1ad2      	subs	r2, r2, r3
 80023da:	2308      	movs	r3, #8
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	429a      	cmp	r2, r3
 80023e0:	d920      	bls.n	8002424 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00b      	beq.n	800240c <pvPortMalloc+0xfc>
	__asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	613b      	str	r3, [r7, #16]
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	1ad2      	subs	r2, r2, r3
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800241e:	69b8      	ldr	r0, [r7, #24]
 8002420:	f000 f90a 	bl	8002638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002424:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <pvPortMalloc+0x18c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	4a1b      	ldr	r2, [pc, #108]	@ (800249c <pvPortMalloc+0x18c>)
 8002430:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002432:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <pvPortMalloc+0x18c>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <pvPortMalloc+0x194>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d203      	bcs.n	8002446 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800243e:	4b17      	ldr	r3, [pc, #92]	@ (800249c <pvPortMalloc+0x18c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a18      	ldr	r2, [pc, #96]	@ (80024a4 <pvPortMalloc+0x194>)
 8002444:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <pvPortMalloc+0x188>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	431a      	orrs	r2, r3
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <pvPortMalloc+0x198>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <pvPortMalloc+0x198>)
 8002462:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002464:	f7ff fab0 	bl	80019c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <pvPortMalloc+0x17a>
	__asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	60fb      	str	r3, [r7, #12]
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	e7fd      	b.n	8002486 <pvPortMalloc+0x176>
	return pvReturn;
 800248a:	69fb      	ldr	r3, [r7, #28]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20001284 	.word	0x20001284
 8002498:	20001298 	.word	0x20001298
 800249c:	20001288 	.word	0x20001288
 80024a0:	2000127c 	.word	0x2000127c
 80024a4:	2000128c 	.word	0x2000128c
 80024a8:	20001290 	.word	0x20001290

080024ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d04f      	beq.n	800255e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80024be:	2308      	movs	r3, #8
 80024c0:	425b      	negs	r3, r3
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <vPortFree+0xbc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10b      	bne.n	80024f2 <vPortFree+0x46>
	__asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	60fb      	str	r3, [r7, #12]
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	e7fd      	b.n	80024ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <vPortFree+0x66>
	__asm volatile
 80024fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	60bb      	str	r3, [r7, #8]
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	e7fd      	b.n	800250e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <vPortFree+0xbc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01e      	beq.n	800255e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d11a      	bne.n	800255e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <vPortFree+0xbc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	43db      	mvns	r3, r3
 8002532:	401a      	ands	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002538:	f7ff fa38 	bl	80019ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <vPortFree+0xc0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4413      	add	r3, r2
 8002546:	4a09      	ldr	r2, [pc, #36]	@ (800256c <vPortFree+0xc0>)
 8002548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800254a:	6938      	ldr	r0, [r7, #16]
 800254c:	f000 f874 	bl	8002638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002550:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <vPortFree+0xc4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <vPortFree+0xc4>)
 8002558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800255a:	f7ff fa35 	bl	80019c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20001298 	.word	0x20001298
 800256c:	20001288 	.word	0x20001288
 8002570:	20001294 	.word	0x20001294

08002574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800257a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800257e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002580:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <prvHeapInit+0xac>)
 8002582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3307      	adds	r3, #7
 8002592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0307 	bic.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <prvHeapInit+0xac>)
 80025a4:	4413      	add	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002624 <prvHeapInit+0xb0>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <prvHeapInit+0xb0>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4413      	add	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80025c0:	2208      	movs	r2, #8
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a15      	ldr	r2, [pc, #84]	@ (8002628 <prvHeapInit+0xb4>)
 80025d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80025d6:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <prvHeapInit+0xb4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80025de:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <prvHeapInit+0xb4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <prvHeapInit+0xb4>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a0a      	ldr	r2, [pc, #40]	@ (800262c <prvHeapInit+0xb8>)
 8002602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4a09      	ldr	r2, [pc, #36]	@ (8002630 <prvHeapInit+0xbc>)
 800260a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800260c:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <prvHeapInit+0xc0>)
 800260e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	2000067c 	.word	0x2000067c
 8002624:	2000127c 	.word	0x2000127c
 8002628:	20001284 	.word	0x20001284
 800262c:	2000128c 	.word	0x2000128c
 8002630:	20001288 	.word	0x20001288
 8002634:	20001298 	.word	0x20001298

08002638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002640:	4b27      	ldr	r3, [pc, #156]	@ (80026e0 <prvInsertBlockIntoFreeList+0xa8>)
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e002      	b.n	800264c <prvInsertBlockIntoFreeList+0x14>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d8f7      	bhi.n	8002646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4413      	add	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	d108      	bne.n	800267a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	441a      	add	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	441a      	add	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d118      	bne.n	80026c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <prvInsertBlockIntoFreeList+0xac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d00d      	beq.n	80026b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	441a      	add	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e008      	b.n	80026c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <prvInsertBlockIntoFreeList+0xac>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e003      	b.n	80026c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d002      	beq.n	80026d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	2000127c 	.word	0x2000127c
 80026e4:	20001284 	.word	0x20001284

080026e8 <siprintf>:
 80026e8:	b40e      	push	{r1, r2, r3}
 80026ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80026ee:	b500      	push	{lr}
 80026f0:	b09c      	sub	sp, #112	@ 0x70
 80026f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80026f4:	9002      	str	r0, [sp, #8]
 80026f6:	9006      	str	r0, [sp, #24]
 80026f8:	9107      	str	r1, [sp, #28]
 80026fa:	9104      	str	r1, [sp, #16]
 80026fc:	4808      	ldr	r0, [pc, #32]	@ (8002720 <siprintf+0x38>)
 80026fe:	4909      	ldr	r1, [pc, #36]	@ (8002724 <siprintf+0x3c>)
 8002700:	f853 2b04 	ldr.w	r2, [r3], #4
 8002704:	9105      	str	r1, [sp, #20]
 8002706:	6800      	ldr	r0, [r0, #0]
 8002708:	a902      	add	r1, sp, #8
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	f000 f9a0 	bl	8002a50 <_svfiprintf_r>
 8002710:	2200      	movs	r2, #0
 8002712:	9b02      	ldr	r3, [sp, #8]
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	b01c      	add	sp, #112	@ 0x70
 8002718:	f85d eb04 	ldr.w	lr, [sp], #4
 800271c:	b003      	add	sp, #12
 800271e:	4770      	bx	lr
 8002720:	20000008 	.word	0x20000008
 8002724:	ffff0208 	.word	0xffff0208

08002728 <memset>:
 8002728:	4603      	mov	r3, r0
 800272a:	4402      	add	r2, r0
 800272c:	4293      	cmp	r3, r2
 800272e:	d100      	bne.n	8002732 <memset+0xa>
 8002730:	4770      	bx	lr
 8002732:	f803 1b01 	strb.w	r1, [r3], #1
 8002736:	e7f9      	b.n	800272c <memset+0x4>

08002738 <__errno>:
 8002738:	4b01      	ldr	r3, [pc, #4]	@ (8002740 <__errno+0x8>)
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000008 	.word	0x20000008

08002744 <__libc_init_array>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	2600      	movs	r6, #0
 8002748:	4d0c      	ldr	r5, [pc, #48]	@ (800277c <__libc_init_array+0x38>)
 800274a:	4c0d      	ldr	r4, [pc, #52]	@ (8002780 <__libc_init_array+0x3c>)
 800274c:	1b64      	subs	r4, r4, r5
 800274e:	10a4      	asrs	r4, r4, #2
 8002750:	42a6      	cmp	r6, r4
 8002752:	d109      	bne.n	8002768 <__libc_init_array+0x24>
 8002754:	f000 fc78 	bl	8003048 <_init>
 8002758:	2600      	movs	r6, #0
 800275a:	4d0a      	ldr	r5, [pc, #40]	@ (8002784 <__libc_init_array+0x40>)
 800275c:	4c0a      	ldr	r4, [pc, #40]	@ (8002788 <__libc_init_array+0x44>)
 800275e:	1b64      	subs	r4, r4, r5
 8002760:	10a4      	asrs	r4, r4, #2
 8002762:	42a6      	cmp	r6, r4
 8002764:	d105      	bne.n	8002772 <__libc_init_array+0x2e>
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	f855 3b04 	ldr.w	r3, [r5], #4
 800276c:	4798      	blx	r3
 800276e:	3601      	adds	r6, #1
 8002770:	e7ee      	b.n	8002750 <__libc_init_array+0xc>
 8002772:	f855 3b04 	ldr.w	r3, [r5], #4
 8002776:	4798      	blx	r3
 8002778:	3601      	adds	r6, #1
 800277a:	e7f2      	b.n	8002762 <__libc_init_array+0x1e>
 800277c:	08003634 	.word	0x08003634
 8002780:	08003634 	.word	0x08003634
 8002784:	08003634 	.word	0x08003634
 8002788:	08003638 	.word	0x08003638

0800278c <__retarget_lock_acquire_recursive>:
 800278c:	4770      	bx	lr

0800278e <__retarget_lock_release_recursive>:
 800278e:	4770      	bx	lr

08002790 <memcpy>:
 8002790:	440a      	add	r2, r1
 8002792:	4291      	cmp	r1, r2
 8002794:	f100 33ff 	add.w	r3, r0, #4294967295
 8002798:	d100      	bne.n	800279c <memcpy+0xc>
 800279a:	4770      	bx	lr
 800279c:	b510      	push	{r4, lr}
 800279e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027a2:	4291      	cmp	r1, r2
 80027a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027a8:	d1f9      	bne.n	800279e <memcpy+0xe>
 80027aa:	bd10      	pop	{r4, pc}

080027ac <_free_r>:
 80027ac:	b538      	push	{r3, r4, r5, lr}
 80027ae:	4605      	mov	r5, r0
 80027b0:	2900      	cmp	r1, #0
 80027b2:	d040      	beq.n	8002836 <_free_r+0x8a>
 80027b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b8:	1f0c      	subs	r4, r1, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bfb8      	it	lt
 80027be:	18e4      	addlt	r4, r4, r3
 80027c0:	f000 f8de 	bl	8002980 <__malloc_lock>
 80027c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <_free_r+0x8c>)
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	b933      	cbnz	r3, 80027d8 <_free_r+0x2c>
 80027ca:	6063      	str	r3, [r4, #4]
 80027cc:	6014      	str	r4, [r2, #0]
 80027ce:	4628      	mov	r0, r5
 80027d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027d4:	f000 b8da 	b.w	800298c <__malloc_unlock>
 80027d8:	42a3      	cmp	r3, r4
 80027da:	d908      	bls.n	80027ee <_free_r+0x42>
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	1821      	adds	r1, r4, r0
 80027e0:	428b      	cmp	r3, r1
 80027e2:	bf01      	itttt	eq
 80027e4:	6819      	ldreq	r1, [r3, #0]
 80027e6:	685b      	ldreq	r3, [r3, #4]
 80027e8:	1809      	addeq	r1, r1, r0
 80027ea:	6021      	streq	r1, [r4, #0]
 80027ec:	e7ed      	b.n	80027ca <_free_r+0x1e>
 80027ee:	461a      	mov	r2, r3
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	b10b      	cbz	r3, 80027f8 <_free_r+0x4c>
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	d9fa      	bls.n	80027ee <_free_r+0x42>
 80027f8:	6811      	ldr	r1, [r2, #0]
 80027fa:	1850      	adds	r0, r2, r1
 80027fc:	42a0      	cmp	r0, r4
 80027fe:	d10b      	bne.n	8002818 <_free_r+0x6c>
 8002800:	6820      	ldr	r0, [r4, #0]
 8002802:	4401      	add	r1, r0
 8002804:	1850      	adds	r0, r2, r1
 8002806:	4283      	cmp	r3, r0
 8002808:	6011      	str	r1, [r2, #0]
 800280a:	d1e0      	bne.n	80027ce <_free_r+0x22>
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4408      	add	r0, r1
 8002812:	6010      	str	r0, [r2, #0]
 8002814:	6053      	str	r3, [r2, #4]
 8002816:	e7da      	b.n	80027ce <_free_r+0x22>
 8002818:	d902      	bls.n	8002820 <_free_r+0x74>
 800281a:	230c      	movs	r3, #12
 800281c:	602b      	str	r3, [r5, #0]
 800281e:	e7d6      	b.n	80027ce <_free_r+0x22>
 8002820:	6820      	ldr	r0, [r4, #0]
 8002822:	1821      	adds	r1, r4, r0
 8002824:	428b      	cmp	r3, r1
 8002826:	bf01      	itttt	eq
 8002828:	6819      	ldreq	r1, [r3, #0]
 800282a:	685b      	ldreq	r3, [r3, #4]
 800282c:	1809      	addeq	r1, r1, r0
 800282e:	6021      	streq	r1, [r4, #0]
 8002830:	6063      	str	r3, [r4, #4]
 8002832:	6054      	str	r4, [r2, #4]
 8002834:	e7cb      	b.n	80027ce <_free_r+0x22>
 8002836:	bd38      	pop	{r3, r4, r5, pc}
 8002838:	200013e0 	.word	0x200013e0

0800283c <sbrk_aligned>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	4e0f      	ldr	r6, [pc, #60]	@ (800287c <sbrk_aligned+0x40>)
 8002840:	460c      	mov	r4, r1
 8002842:	6831      	ldr	r1, [r6, #0]
 8002844:	4605      	mov	r5, r0
 8002846:	b911      	cbnz	r1, 800284e <sbrk_aligned+0x12>
 8002848:	f000 fbaa 	bl	8002fa0 <_sbrk_r>
 800284c:	6030      	str	r0, [r6, #0]
 800284e:	4621      	mov	r1, r4
 8002850:	4628      	mov	r0, r5
 8002852:	f000 fba5 	bl	8002fa0 <_sbrk_r>
 8002856:	1c43      	adds	r3, r0, #1
 8002858:	d103      	bne.n	8002862 <sbrk_aligned+0x26>
 800285a:	f04f 34ff 	mov.w	r4, #4294967295
 800285e:	4620      	mov	r0, r4
 8002860:	bd70      	pop	{r4, r5, r6, pc}
 8002862:	1cc4      	adds	r4, r0, #3
 8002864:	f024 0403 	bic.w	r4, r4, #3
 8002868:	42a0      	cmp	r0, r4
 800286a:	d0f8      	beq.n	800285e <sbrk_aligned+0x22>
 800286c:	1a21      	subs	r1, r4, r0
 800286e:	4628      	mov	r0, r5
 8002870:	f000 fb96 	bl	8002fa0 <_sbrk_r>
 8002874:	3001      	adds	r0, #1
 8002876:	d1f2      	bne.n	800285e <sbrk_aligned+0x22>
 8002878:	e7ef      	b.n	800285a <sbrk_aligned+0x1e>
 800287a:	bf00      	nop
 800287c:	200013dc 	.word	0x200013dc

08002880 <_malloc_r>:
 8002880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002884:	1ccd      	adds	r5, r1, #3
 8002886:	f025 0503 	bic.w	r5, r5, #3
 800288a:	3508      	adds	r5, #8
 800288c:	2d0c      	cmp	r5, #12
 800288e:	bf38      	it	cc
 8002890:	250c      	movcc	r5, #12
 8002892:	2d00      	cmp	r5, #0
 8002894:	4606      	mov	r6, r0
 8002896:	db01      	blt.n	800289c <_malloc_r+0x1c>
 8002898:	42a9      	cmp	r1, r5
 800289a:	d904      	bls.n	80028a6 <_malloc_r+0x26>
 800289c:	230c      	movs	r3, #12
 800289e:	6033      	str	r3, [r6, #0]
 80028a0:	2000      	movs	r0, #0
 80028a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800297c <_malloc_r+0xfc>
 80028aa:	f000 f869 	bl	8002980 <__malloc_lock>
 80028ae:	f8d8 3000 	ldr.w	r3, [r8]
 80028b2:	461c      	mov	r4, r3
 80028b4:	bb44      	cbnz	r4, 8002908 <_malloc_r+0x88>
 80028b6:	4629      	mov	r1, r5
 80028b8:	4630      	mov	r0, r6
 80028ba:	f7ff ffbf 	bl	800283c <sbrk_aligned>
 80028be:	1c43      	adds	r3, r0, #1
 80028c0:	4604      	mov	r4, r0
 80028c2:	d158      	bne.n	8002976 <_malloc_r+0xf6>
 80028c4:	f8d8 4000 	ldr.w	r4, [r8]
 80028c8:	4627      	mov	r7, r4
 80028ca:	2f00      	cmp	r7, #0
 80028cc:	d143      	bne.n	8002956 <_malloc_r+0xd6>
 80028ce:	2c00      	cmp	r4, #0
 80028d0:	d04b      	beq.n	800296a <_malloc_r+0xea>
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	4639      	mov	r1, r7
 80028d6:	4630      	mov	r0, r6
 80028d8:	eb04 0903 	add.w	r9, r4, r3
 80028dc:	f000 fb60 	bl	8002fa0 <_sbrk_r>
 80028e0:	4581      	cmp	r9, r0
 80028e2:	d142      	bne.n	800296a <_malloc_r+0xea>
 80028e4:	6821      	ldr	r1, [r4, #0]
 80028e6:	4630      	mov	r0, r6
 80028e8:	1a6d      	subs	r5, r5, r1
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7ff ffa6 	bl	800283c <sbrk_aligned>
 80028f0:	3001      	adds	r0, #1
 80028f2:	d03a      	beq.n	800296a <_malloc_r+0xea>
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	442b      	add	r3, r5
 80028f8:	6023      	str	r3, [r4, #0]
 80028fa:	f8d8 3000 	ldr.w	r3, [r8]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	bb62      	cbnz	r2, 800295c <_malloc_r+0xdc>
 8002902:	f8c8 7000 	str.w	r7, [r8]
 8002906:	e00f      	b.n	8002928 <_malloc_r+0xa8>
 8002908:	6822      	ldr	r2, [r4, #0]
 800290a:	1b52      	subs	r2, r2, r5
 800290c:	d420      	bmi.n	8002950 <_malloc_r+0xd0>
 800290e:	2a0b      	cmp	r2, #11
 8002910:	d917      	bls.n	8002942 <_malloc_r+0xc2>
 8002912:	1961      	adds	r1, r4, r5
 8002914:	42a3      	cmp	r3, r4
 8002916:	6025      	str	r5, [r4, #0]
 8002918:	bf18      	it	ne
 800291a:	6059      	strne	r1, [r3, #4]
 800291c:	6863      	ldr	r3, [r4, #4]
 800291e:	bf08      	it	eq
 8002920:	f8c8 1000 	streq.w	r1, [r8]
 8002924:	5162      	str	r2, [r4, r5]
 8002926:	604b      	str	r3, [r1, #4]
 8002928:	4630      	mov	r0, r6
 800292a:	f000 f82f 	bl	800298c <__malloc_unlock>
 800292e:	f104 000b 	add.w	r0, r4, #11
 8002932:	1d23      	adds	r3, r4, #4
 8002934:	f020 0007 	bic.w	r0, r0, #7
 8002938:	1ac2      	subs	r2, r0, r3
 800293a:	bf1c      	itt	ne
 800293c:	1a1b      	subne	r3, r3, r0
 800293e:	50a3      	strne	r3, [r4, r2]
 8002940:	e7af      	b.n	80028a2 <_malloc_r+0x22>
 8002942:	6862      	ldr	r2, [r4, #4]
 8002944:	42a3      	cmp	r3, r4
 8002946:	bf0c      	ite	eq
 8002948:	f8c8 2000 	streq.w	r2, [r8]
 800294c:	605a      	strne	r2, [r3, #4]
 800294e:	e7eb      	b.n	8002928 <_malloc_r+0xa8>
 8002950:	4623      	mov	r3, r4
 8002952:	6864      	ldr	r4, [r4, #4]
 8002954:	e7ae      	b.n	80028b4 <_malloc_r+0x34>
 8002956:	463c      	mov	r4, r7
 8002958:	687f      	ldr	r7, [r7, #4]
 800295a:	e7b6      	b.n	80028ca <_malloc_r+0x4a>
 800295c:	461a      	mov	r2, r3
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	42a3      	cmp	r3, r4
 8002962:	d1fb      	bne.n	800295c <_malloc_r+0xdc>
 8002964:	2300      	movs	r3, #0
 8002966:	6053      	str	r3, [r2, #4]
 8002968:	e7de      	b.n	8002928 <_malloc_r+0xa8>
 800296a:	230c      	movs	r3, #12
 800296c:	4630      	mov	r0, r6
 800296e:	6033      	str	r3, [r6, #0]
 8002970:	f000 f80c 	bl	800298c <__malloc_unlock>
 8002974:	e794      	b.n	80028a0 <_malloc_r+0x20>
 8002976:	6005      	str	r5, [r0, #0]
 8002978:	e7d6      	b.n	8002928 <_malloc_r+0xa8>
 800297a:	bf00      	nop
 800297c:	200013e0 	.word	0x200013e0

08002980 <__malloc_lock>:
 8002980:	4801      	ldr	r0, [pc, #4]	@ (8002988 <__malloc_lock+0x8>)
 8002982:	f7ff bf03 	b.w	800278c <__retarget_lock_acquire_recursive>
 8002986:	bf00      	nop
 8002988:	200013d8 	.word	0x200013d8

0800298c <__malloc_unlock>:
 800298c:	4801      	ldr	r0, [pc, #4]	@ (8002994 <__malloc_unlock+0x8>)
 800298e:	f7ff befe 	b.w	800278e <__retarget_lock_release_recursive>
 8002992:	bf00      	nop
 8002994:	200013d8 	.word	0x200013d8

08002998 <__ssputs_r>:
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	461f      	mov	r7, r3
 800299e:	688e      	ldr	r6, [r1, #8]
 80029a0:	4682      	mov	sl, r0
 80029a2:	42be      	cmp	r6, r7
 80029a4:	460c      	mov	r4, r1
 80029a6:	4690      	mov	r8, r2
 80029a8:	680b      	ldr	r3, [r1, #0]
 80029aa:	d82d      	bhi.n	8002a08 <__ssputs_r+0x70>
 80029ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80029b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80029b4:	d026      	beq.n	8002a04 <__ssputs_r+0x6c>
 80029b6:	6965      	ldr	r5, [r4, #20]
 80029b8:	6909      	ldr	r1, [r1, #16]
 80029ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029be:	eba3 0901 	sub.w	r9, r3, r1
 80029c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029c6:	1c7b      	adds	r3, r7, #1
 80029c8:	444b      	add	r3, r9
 80029ca:	106d      	asrs	r5, r5, #1
 80029cc:	429d      	cmp	r5, r3
 80029ce:	bf38      	it	cc
 80029d0:	461d      	movcc	r5, r3
 80029d2:	0553      	lsls	r3, r2, #21
 80029d4:	d527      	bpl.n	8002a26 <__ssputs_r+0x8e>
 80029d6:	4629      	mov	r1, r5
 80029d8:	f7ff ff52 	bl	8002880 <_malloc_r>
 80029dc:	4606      	mov	r6, r0
 80029de:	b360      	cbz	r0, 8002a3a <__ssputs_r+0xa2>
 80029e0:	464a      	mov	r2, r9
 80029e2:	6921      	ldr	r1, [r4, #16]
 80029e4:	f7ff fed4 	bl	8002790 <memcpy>
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80029ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f2:	81a3      	strh	r3, [r4, #12]
 80029f4:	6126      	str	r6, [r4, #16]
 80029f6:	444e      	add	r6, r9
 80029f8:	6026      	str	r6, [r4, #0]
 80029fa:	463e      	mov	r6, r7
 80029fc:	6165      	str	r5, [r4, #20]
 80029fe:	eba5 0509 	sub.w	r5, r5, r9
 8002a02:	60a5      	str	r5, [r4, #8]
 8002a04:	42be      	cmp	r6, r7
 8002a06:	d900      	bls.n	8002a0a <__ssputs_r+0x72>
 8002a08:	463e      	mov	r6, r7
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	6820      	ldr	r0, [r4, #0]
 8002a10:	f000 faac 	bl	8002f6c <memmove>
 8002a14:	2000      	movs	r0, #0
 8002a16:	68a3      	ldr	r3, [r4, #8]
 8002a18:	1b9b      	subs	r3, r3, r6
 8002a1a:	60a3      	str	r3, [r4, #8]
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	4433      	add	r3, r6
 8002a20:	6023      	str	r3, [r4, #0]
 8002a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a26:	462a      	mov	r2, r5
 8002a28:	f000 fad8 	bl	8002fdc <_realloc_r>
 8002a2c:	4606      	mov	r6, r0
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d1e0      	bne.n	80029f4 <__ssputs_r+0x5c>
 8002a32:	4650      	mov	r0, sl
 8002a34:	6921      	ldr	r1, [r4, #16]
 8002a36:	f7ff feb9 	bl	80027ac <_free_r>
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	f8ca 3000 	str.w	r3, [sl]
 8002a40:	89a3      	ldrh	r3, [r4, #12]
 8002a42:	f04f 30ff 	mov.w	r0, #4294967295
 8002a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a4a:	81a3      	strh	r3, [r4, #12]
 8002a4c:	e7e9      	b.n	8002a22 <__ssputs_r+0x8a>
	...

08002a50 <_svfiprintf_r>:
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	4698      	mov	r8, r3
 8002a56:	898b      	ldrh	r3, [r1, #12]
 8002a58:	4607      	mov	r7, r0
 8002a5a:	061b      	lsls	r3, r3, #24
 8002a5c:	460d      	mov	r5, r1
 8002a5e:	4614      	mov	r4, r2
 8002a60:	b09d      	sub	sp, #116	@ 0x74
 8002a62:	d510      	bpl.n	8002a86 <_svfiprintf_r+0x36>
 8002a64:	690b      	ldr	r3, [r1, #16]
 8002a66:	b973      	cbnz	r3, 8002a86 <_svfiprintf_r+0x36>
 8002a68:	2140      	movs	r1, #64	@ 0x40
 8002a6a:	f7ff ff09 	bl	8002880 <_malloc_r>
 8002a6e:	6028      	str	r0, [r5, #0]
 8002a70:	6128      	str	r0, [r5, #16]
 8002a72:	b930      	cbnz	r0, 8002a82 <_svfiprintf_r+0x32>
 8002a74:	230c      	movs	r3, #12
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	b01d      	add	sp, #116	@ 0x74
 8002a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a82:	2340      	movs	r3, #64	@ 0x40
 8002a84:	616b      	str	r3, [r5, #20]
 8002a86:	2300      	movs	r3, #0
 8002a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a90:	2330      	movs	r3, #48	@ 0x30
 8002a92:	f04f 0901 	mov.w	r9, #1
 8002a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002c34 <_svfiprintf_r+0x1e4>
 8002a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	469a      	mov	sl, r3
 8002aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aaa:	b10a      	cbz	r2, 8002ab0 <_svfiprintf_r+0x60>
 8002aac:	2a25      	cmp	r2, #37	@ 0x25
 8002aae:	d1f9      	bne.n	8002aa4 <_svfiprintf_r+0x54>
 8002ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ab4:	d00b      	beq.n	8002ace <_svfiprintf_r+0x7e>
 8002ab6:	465b      	mov	r3, fp
 8002ab8:	4622      	mov	r2, r4
 8002aba:	4629      	mov	r1, r5
 8002abc:	4638      	mov	r0, r7
 8002abe:	f7ff ff6b 	bl	8002998 <__ssputs_r>
 8002ac2:	3001      	adds	r0, #1
 8002ac4:	f000 80a7 	beq.w	8002c16 <_svfiprintf_r+0x1c6>
 8002ac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002aca:	445a      	add	r2, fp
 8002acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ace:	f89a 3000 	ldrb.w	r3, [sl]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 809f 	beq.w	8002c16 <_svfiprintf_r+0x1c6>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295
 8002ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ae2:	f10a 0a01 	add.w	sl, sl, #1
 8002ae6:	9304      	str	r3, [sp, #16]
 8002ae8:	9307      	str	r3, [sp, #28]
 8002aea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002aee:	931a      	str	r3, [sp, #104]	@ 0x68
 8002af0:	4654      	mov	r4, sl
 8002af2:	2205      	movs	r2, #5
 8002af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002af8:	484e      	ldr	r0, [pc, #312]	@ (8002c34 <_svfiprintf_r+0x1e4>)
 8002afa:	f000 fa61 	bl	8002fc0 <memchr>
 8002afe:	9a04      	ldr	r2, [sp, #16]
 8002b00:	b9d8      	cbnz	r0, 8002b3a <_svfiprintf_r+0xea>
 8002b02:	06d0      	lsls	r0, r2, #27
 8002b04:	bf44      	itt	mi
 8002b06:	2320      	movmi	r3, #32
 8002b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b0c:	0711      	lsls	r1, r2, #28
 8002b0e:	bf44      	itt	mi
 8002b10:	232b      	movmi	r3, #43	@ 0x2b
 8002b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b16:	f89a 3000 	ldrb.w	r3, [sl]
 8002b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b1c:	d015      	beq.n	8002b4a <_svfiprintf_r+0xfa>
 8002b1e:	4654      	mov	r4, sl
 8002b20:	2000      	movs	r0, #0
 8002b22:	f04f 0c0a 	mov.w	ip, #10
 8002b26:	9a07      	ldr	r2, [sp, #28]
 8002b28:	4621      	mov	r1, r4
 8002b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b2e:	3b30      	subs	r3, #48	@ 0x30
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	d94b      	bls.n	8002bcc <_svfiprintf_r+0x17c>
 8002b34:	b1b0      	cbz	r0, 8002b64 <_svfiprintf_r+0x114>
 8002b36:	9207      	str	r2, [sp, #28]
 8002b38:	e014      	b.n	8002b64 <_svfiprintf_r+0x114>
 8002b3a:	eba0 0308 	sub.w	r3, r0, r8
 8002b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	46a2      	mov	sl, r4
 8002b46:	9304      	str	r3, [sp, #16]
 8002b48:	e7d2      	b.n	8002af0 <_svfiprintf_r+0xa0>
 8002b4a:	9b03      	ldr	r3, [sp, #12]
 8002b4c:	1d19      	adds	r1, r3, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	9103      	str	r1, [sp, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bfbb      	ittet	lt
 8002b56:	425b      	neglt	r3, r3
 8002b58:	f042 0202 	orrlt.w	r2, r2, #2
 8002b5c:	9307      	strge	r3, [sp, #28]
 8002b5e:	9307      	strlt	r3, [sp, #28]
 8002b60:	bfb8      	it	lt
 8002b62:	9204      	strlt	r2, [sp, #16]
 8002b64:	7823      	ldrb	r3, [r4, #0]
 8002b66:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b68:	d10a      	bne.n	8002b80 <_svfiprintf_r+0x130>
 8002b6a:	7863      	ldrb	r3, [r4, #1]
 8002b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b6e:	d132      	bne.n	8002bd6 <_svfiprintf_r+0x186>
 8002b70:	9b03      	ldr	r3, [sp, #12]
 8002b72:	3402      	adds	r4, #2
 8002b74:	1d1a      	adds	r2, r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	9203      	str	r2, [sp, #12]
 8002b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b7e:	9305      	str	r3, [sp, #20]
 8002b80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002c38 <_svfiprintf_r+0x1e8>
 8002b84:	2203      	movs	r2, #3
 8002b86:	4650      	mov	r0, sl
 8002b88:	7821      	ldrb	r1, [r4, #0]
 8002b8a:	f000 fa19 	bl	8002fc0 <memchr>
 8002b8e:	b138      	cbz	r0, 8002ba0 <_svfiprintf_r+0x150>
 8002b90:	2240      	movs	r2, #64	@ 0x40
 8002b92:	9b04      	ldr	r3, [sp, #16]
 8002b94:	eba0 000a 	sub.w	r0, r0, sl
 8002b98:	4082      	lsls	r2, r0
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	3401      	adds	r4, #1
 8002b9e:	9304      	str	r3, [sp, #16]
 8002ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ba4:	2206      	movs	r2, #6
 8002ba6:	4825      	ldr	r0, [pc, #148]	@ (8002c3c <_svfiprintf_r+0x1ec>)
 8002ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002bac:	f000 fa08 	bl	8002fc0 <memchr>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d036      	beq.n	8002c22 <_svfiprintf_r+0x1d2>
 8002bb4:	4b22      	ldr	r3, [pc, #136]	@ (8002c40 <_svfiprintf_r+0x1f0>)
 8002bb6:	bb1b      	cbnz	r3, 8002c00 <_svfiprintf_r+0x1b0>
 8002bb8:	9b03      	ldr	r3, [sp, #12]
 8002bba:	3307      	adds	r3, #7
 8002bbc:	f023 0307 	bic.w	r3, r3, #7
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	9303      	str	r3, [sp, #12]
 8002bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bc6:	4433      	add	r3, r6
 8002bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bca:	e76a      	b.n	8002aa2 <_svfiprintf_r+0x52>
 8002bcc:	460c      	mov	r4, r1
 8002bce:	2001      	movs	r0, #1
 8002bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bd4:	e7a8      	b.n	8002b28 <_svfiprintf_r+0xd8>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f04f 0c0a 	mov.w	ip, #10
 8002bdc:	4619      	mov	r1, r3
 8002bde:	3401      	adds	r4, #1
 8002be0:	9305      	str	r3, [sp, #20]
 8002be2:	4620      	mov	r0, r4
 8002be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002be8:	3a30      	subs	r2, #48	@ 0x30
 8002bea:	2a09      	cmp	r2, #9
 8002bec:	d903      	bls.n	8002bf6 <_svfiprintf_r+0x1a6>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0c6      	beq.n	8002b80 <_svfiprintf_r+0x130>
 8002bf2:	9105      	str	r1, [sp, #20]
 8002bf4:	e7c4      	b.n	8002b80 <_svfiprintf_r+0x130>
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bfe:	e7f0      	b.n	8002be2 <_svfiprintf_r+0x192>
 8002c00:	ab03      	add	r3, sp, #12
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	462a      	mov	r2, r5
 8002c06:	4638      	mov	r0, r7
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <_svfiprintf_r+0x1f4>)
 8002c0a:	a904      	add	r1, sp, #16
 8002c0c:	f3af 8000 	nop.w
 8002c10:	1c42      	adds	r2, r0, #1
 8002c12:	4606      	mov	r6, r0
 8002c14:	d1d6      	bne.n	8002bc4 <_svfiprintf_r+0x174>
 8002c16:	89ab      	ldrh	r3, [r5, #12]
 8002c18:	065b      	lsls	r3, r3, #25
 8002c1a:	f53f af2d 	bmi.w	8002a78 <_svfiprintf_r+0x28>
 8002c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c20:	e72c      	b.n	8002a7c <_svfiprintf_r+0x2c>
 8002c22:	ab03      	add	r3, sp, #12
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	462a      	mov	r2, r5
 8002c28:	4638      	mov	r0, r7
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <_svfiprintf_r+0x1f4>)
 8002c2c:	a904      	add	r1, sp, #16
 8002c2e:	f000 f87d 	bl	8002d2c <_printf_i>
 8002c32:	e7ed      	b.n	8002c10 <_svfiprintf_r+0x1c0>
 8002c34:	080035f9 	.word	0x080035f9
 8002c38:	080035ff 	.word	0x080035ff
 8002c3c:	08003603 	.word	0x08003603
 8002c40:	00000000 	.word	0x00000000
 8002c44:	08002999 	.word	0x08002999

08002c48 <_printf_common>:
 8002c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c4c:	4616      	mov	r6, r2
 8002c4e:	4698      	mov	r8, r3
 8002c50:	688a      	ldr	r2, [r1, #8]
 8002c52:	690b      	ldr	r3, [r1, #16]
 8002c54:	4607      	mov	r7, r0
 8002c56:	4293      	cmp	r3, r2
 8002c58:	bfb8      	it	lt
 8002c5a:	4613      	movlt	r3, r2
 8002c5c:	6033      	str	r3, [r6, #0]
 8002c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c62:	460c      	mov	r4, r1
 8002c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c68:	b10a      	cbz	r2, 8002c6e <_printf_common+0x26>
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	6033      	str	r3, [r6, #0]
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	0699      	lsls	r1, r3, #26
 8002c72:	bf42      	ittt	mi
 8002c74:	6833      	ldrmi	r3, [r6, #0]
 8002c76:	3302      	addmi	r3, #2
 8002c78:	6033      	strmi	r3, [r6, #0]
 8002c7a:	6825      	ldr	r5, [r4, #0]
 8002c7c:	f015 0506 	ands.w	r5, r5, #6
 8002c80:	d106      	bne.n	8002c90 <_printf_common+0x48>
 8002c82:	f104 0a19 	add.w	sl, r4, #25
 8002c86:	68e3      	ldr	r3, [r4, #12]
 8002c88:	6832      	ldr	r2, [r6, #0]
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	42ab      	cmp	r3, r5
 8002c8e:	dc2b      	bgt.n	8002ce8 <_printf_common+0xa0>
 8002c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c94:	6822      	ldr	r2, [r4, #0]
 8002c96:	3b00      	subs	r3, #0
 8002c98:	bf18      	it	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	0692      	lsls	r2, r2, #26
 8002c9e:	d430      	bmi.n	8002d02 <_printf_common+0xba>
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ca8:	47c8      	blx	r9
 8002caa:	3001      	adds	r0, #1
 8002cac:	d023      	beq.n	8002cf6 <_printf_common+0xae>
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	6922      	ldr	r2, [r4, #16]
 8002cb2:	f003 0306 	and.w	r3, r3, #6
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	bf14      	ite	ne
 8002cba:	2500      	movne	r5, #0
 8002cbc:	6833      	ldreq	r3, [r6, #0]
 8002cbe:	f04f 0600 	mov.w	r6, #0
 8002cc2:	bf08      	it	eq
 8002cc4:	68e5      	ldreq	r5, [r4, #12]
 8002cc6:	f104 041a 	add.w	r4, r4, #26
 8002cca:	bf08      	it	eq
 8002ccc:	1aed      	subeq	r5, r5, r3
 8002cce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002cd2:	bf08      	it	eq
 8002cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bfc4      	itt	gt
 8002cdc:	1a9b      	subgt	r3, r3, r2
 8002cde:	18ed      	addgt	r5, r5, r3
 8002ce0:	42b5      	cmp	r5, r6
 8002ce2:	d11a      	bne.n	8002d1a <_printf_common+0xd2>
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e008      	b.n	8002cfa <_printf_common+0xb2>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4652      	mov	r2, sl
 8002cec:	4641      	mov	r1, r8
 8002cee:	4638      	mov	r0, r7
 8002cf0:	47c8      	blx	r9
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d103      	bne.n	8002cfe <_printf_common+0xb6>
 8002cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cfe:	3501      	adds	r5, #1
 8002d00:	e7c1      	b.n	8002c86 <_printf_common+0x3e>
 8002d02:	2030      	movs	r0, #48	@ 0x30
 8002d04:	18e1      	adds	r1, r4, r3
 8002d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d10:	4422      	add	r2, r4
 8002d12:	3302      	adds	r3, #2
 8002d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d18:	e7c2      	b.n	8002ca0 <_printf_common+0x58>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	4641      	mov	r1, r8
 8002d20:	4638      	mov	r0, r7
 8002d22:	47c8      	blx	r9
 8002d24:	3001      	adds	r0, #1
 8002d26:	d0e6      	beq.n	8002cf6 <_printf_common+0xae>
 8002d28:	3601      	adds	r6, #1
 8002d2a:	e7d9      	b.n	8002ce0 <_printf_common+0x98>

08002d2c <_printf_i>:
 8002d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d30:	7e0f      	ldrb	r7, [r1, #24]
 8002d32:	4691      	mov	r9, r2
 8002d34:	2f78      	cmp	r7, #120	@ 0x78
 8002d36:	4680      	mov	r8, r0
 8002d38:	460c      	mov	r4, r1
 8002d3a:	469a      	mov	sl, r3
 8002d3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d42:	d807      	bhi.n	8002d54 <_printf_i+0x28>
 8002d44:	2f62      	cmp	r7, #98	@ 0x62
 8002d46:	d80a      	bhi.n	8002d5e <_printf_i+0x32>
 8002d48:	2f00      	cmp	r7, #0
 8002d4a:	f000 80d3 	beq.w	8002ef4 <_printf_i+0x1c8>
 8002d4e:	2f58      	cmp	r7, #88	@ 0x58
 8002d50:	f000 80ba 	beq.w	8002ec8 <_printf_i+0x19c>
 8002d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d5c:	e03a      	b.n	8002dd4 <_printf_i+0xa8>
 8002d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d62:	2b15      	cmp	r3, #21
 8002d64:	d8f6      	bhi.n	8002d54 <_printf_i+0x28>
 8002d66:	a101      	add	r1, pc, #4	@ (adr r1, 8002d6c <_printf_i+0x40>)
 8002d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d6c:	08002dc5 	.word	0x08002dc5
 8002d70:	08002dd9 	.word	0x08002dd9
 8002d74:	08002d55 	.word	0x08002d55
 8002d78:	08002d55 	.word	0x08002d55
 8002d7c:	08002d55 	.word	0x08002d55
 8002d80:	08002d55 	.word	0x08002d55
 8002d84:	08002dd9 	.word	0x08002dd9
 8002d88:	08002d55 	.word	0x08002d55
 8002d8c:	08002d55 	.word	0x08002d55
 8002d90:	08002d55 	.word	0x08002d55
 8002d94:	08002d55 	.word	0x08002d55
 8002d98:	08002edb 	.word	0x08002edb
 8002d9c:	08002e03 	.word	0x08002e03
 8002da0:	08002e95 	.word	0x08002e95
 8002da4:	08002d55 	.word	0x08002d55
 8002da8:	08002d55 	.word	0x08002d55
 8002dac:	08002efd 	.word	0x08002efd
 8002db0:	08002d55 	.word	0x08002d55
 8002db4:	08002e03 	.word	0x08002e03
 8002db8:	08002d55 	.word	0x08002d55
 8002dbc:	08002d55 	.word	0x08002d55
 8002dc0:	08002e9d 	.word	0x08002e9d
 8002dc4:	6833      	ldr	r3, [r6, #0]
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6032      	str	r2, [r6, #0]
 8002dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e09e      	b.n	8002f16 <_printf_i+0x1ea>
 8002dd8:	6833      	ldr	r3, [r6, #0]
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	1d19      	adds	r1, r3, #4
 8002dde:	6031      	str	r1, [r6, #0]
 8002de0:	0606      	lsls	r6, r0, #24
 8002de2:	d501      	bpl.n	8002de8 <_printf_i+0xbc>
 8002de4:	681d      	ldr	r5, [r3, #0]
 8002de6:	e003      	b.n	8002df0 <_printf_i+0xc4>
 8002de8:	0645      	lsls	r5, r0, #25
 8002dea:	d5fb      	bpl.n	8002de4 <_printf_i+0xb8>
 8002dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	da03      	bge.n	8002dfc <_printf_i+0xd0>
 8002df4:	232d      	movs	r3, #45	@ 0x2d
 8002df6:	426d      	negs	r5, r5
 8002df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	4859      	ldr	r0, [pc, #356]	@ (8002f64 <_printf_i+0x238>)
 8002e00:	e011      	b.n	8002e26 <_printf_i+0xfa>
 8002e02:	6821      	ldr	r1, [r4, #0]
 8002e04:	6833      	ldr	r3, [r6, #0]
 8002e06:	0608      	lsls	r0, r1, #24
 8002e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e0c:	d402      	bmi.n	8002e14 <_printf_i+0xe8>
 8002e0e:	0649      	lsls	r1, r1, #25
 8002e10:	bf48      	it	mi
 8002e12:	b2ad      	uxthmi	r5, r5
 8002e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e16:	6033      	str	r3, [r6, #0]
 8002e18:	bf14      	ite	ne
 8002e1a:	230a      	movne	r3, #10
 8002e1c:	2308      	moveq	r3, #8
 8002e1e:	4851      	ldr	r0, [pc, #324]	@ (8002f64 <_printf_i+0x238>)
 8002e20:	2100      	movs	r1, #0
 8002e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e26:	6866      	ldr	r6, [r4, #4]
 8002e28:	2e00      	cmp	r6, #0
 8002e2a:	bfa8      	it	ge
 8002e2c:	6821      	ldrge	r1, [r4, #0]
 8002e2e:	60a6      	str	r6, [r4, #8]
 8002e30:	bfa4      	itt	ge
 8002e32:	f021 0104 	bicge.w	r1, r1, #4
 8002e36:	6021      	strge	r1, [r4, #0]
 8002e38:	b90d      	cbnz	r5, 8002e3e <_printf_i+0x112>
 8002e3a:	2e00      	cmp	r6, #0
 8002e3c:	d04b      	beq.n	8002ed6 <_printf_i+0x1aa>
 8002e3e:	4616      	mov	r6, r2
 8002e40:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e44:	fb03 5711 	mls	r7, r3, r1, r5
 8002e48:	5dc7      	ldrb	r7, [r0, r7]
 8002e4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e4e:	462f      	mov	r7, r5
 8002e50:	42bb      	cmp	r3, r7
 8002e52:	460d      	mov	r5, r1
 8002e54:	d9f4      	bls.n	8002e40 <_printf_i+0x114>
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d10b      	bne.n	8002e72 <_printf_i+0x146>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	07df      	lsls	r7, r3, #31
 8002e5e:	d508      	bpl.n	8002e72 <_printf_i+0x146>
 8002e60:	6923      	ldr	r3, [r4, #16]
 8002e62:	6861      	ldr	r1, [r4, #4]
 8002e64:	4299      	cmp	r1, r3
 8002e66:	bfde      	ittt	le
 8002e68:	2330      	movle	r3, #48	@ 0x30
 8002e6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e72:	1b92      	subs	r2, r2, r6
 8002e74:	6122      	str	r2, [r4, #16]
 8002e76:	464b      	mov	r3, r9
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	f8cd a000 	str.w	sl, [sp]
 8002e80:	aa03      	add	r2, sp, #12
 8002e82:	f7ff fee1 	bl	8002c48 <_printf_common>
 8002e86:	3001      	adds	r0, #1
 8002e88:	d14a      	bne.n	8002f20 <_printf_i+0x1f4>
 8002e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8e:	b004      	add	sp, #16
 8002e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	f043 0320 	orr.w	r3, r3, #32
 8002e9a:	6023      	str	r3, [r4, #0]
 8002e9c:	2778      	movs	r7, #120	@ 0x78
 8002e9e:	4832      	ldr	r0, [pc, #200]	@ (8002f68 <_printf_i+0x23c>)
 8002ea0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	6831      	ldr	r1, [r6, #0]
 8002ea8:	061f      	lsls	r7, r3, #24
 8002eaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8002eae:	d402      	bmi.n	8002eb6 <_printf_i+0x18a>
 8002eb0:	065f      	lsls	r7, r3, #25
 8002eb2:	bf48      	it	mi
 8002eb4:	b2ad      	uxthmi	r5, r5
 8002eb6:	6031      	str	r1, [r6, #0]
 8002eb8:	07d9      	lsls	r1, r3, #31
 8002eba:	bf44      	itt	mi
 8002ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8002ec0:	6023      	strmi	r3, [r4, #0]
 8002ec2:	b11d      	cbz	r5, 8002ecc <_printf_i+0x1a0>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	e7ab      	b.n	8002e20 <_printf_i+0xf4>
 8002ec8:	4826      	ldr	r0, [pc, #152]	@ (8002f64 <_printf_i+0x238>)
 8002eca:	e7e9      	b.n	8002ea0 <_printf_i+0x174>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	f023 0320 	bic.w	r3, r3, #32
 8002ed2:	6023      	str	r3, [r4, #0]
 8002ed4:	e7f6      	b.n	8002ec4 <_printf_i+0x198>
 8002ed6:	4616      	mov	r6, r2
 8002ed8:	e7bd      	b.n	8002e56 <_printf_i+0x12a>
 8002eda:	6833      	ldr	r3, [r6, #0]
 8002edc:	6825      	ldr	r5, [r4, #0]
 8002ede:	1d18      	adds	r0, r3, #4
 8002ee0:	6961      	ldr	r1, [r4, #20]
 8002ee2:	6030      	str	r0, [r6, #0]
 8002ee4:	062e      	lsls	r6, r5, #24
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	d501      	bpl.n	8002eee <_printf_i+0x1c2>
 8002eea:	6019      	str	r1, [r3, #0]
 8002eec:	e002      	b.n	8002ef4 <_printf_i+0x1c8>
 8002eee:	0668      	lsls	r0, r5, #25
 8002ef0:	d5fb      	bpl.n	8002eea <_printf_i+0x1be>
 8002ef2:	8019      	strh	r1, [r3, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	4616      	mov	r6, r2
 8002ef8:	6123      	str	r3, [r4, #16]
 8002efa:	e7bc      	b.n	8002e76 <_printf_i+0x14a>
 8002efc:	6833      	ldr	r3, [r6, #0]
 8002efe:	2100      	movs	r1, #0
 8002f00:	1d1a      	adds	r2, r3, #4
 8002f02:	6032      	str	r2, [r6, #0]
 8002f04:	681e      	ldr	r6, [r3, #0]
 8002f06:	6862      	ldr	r2, [r4, #4]
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f000 f859 	bl	8002fc0 <memchr>
 8002f0e:	b108      	cbz	r0, 8002f14 <_printf_i+0x1e8>
 8002f10:	1b80      	subs	r0, r0, r6
 8002f12:	6060      	str	r0, [r4, #4]
 8002f14:	6863      	ldr	r3, [r4, #4]
 8002f16:	6123      	str	r3, [r4, #16]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f1e:	e7aa      	b.n	8002e76 <_printf_i+0x14a>
 8002f20:	4632      	mov	r2, r6
 8002f22:	4649      	mov	r1, r9
 8002f24:	4640      	mov	r0, r8
 8002f26:	6923      	ldr	r3, [r4, #16]
 8002f28:	47d0      	blx	sl
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d0ad      	beq.n	8002e8a <_printf_i+0x15e>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	079b      	lsls	r3, r3, #30
 8002f32:	d413      	bmi.n	8002f5c <_printf_i+0x230>
 8002f34:	68e0      	ldr	r0, [r4, #12]
 8002f36:	9b03      	ldr	r3, [sp, #12]
 8002f38:	4298      	cmp	r0, r3
 8002f3a:	bfb8      	it	lt
 8002f3c:	4618      	movlt	r0, r3
 8002f3e:	e7a6      	b.n	8002e8e <_printf_i+0x162>
 8002f40:	2301      	movs	r3, #1
 8002f42:	4632      	mov	r2, r6
 8002f44:	4649      	mov	r1, r9
 8002f46:	4640      	mov	r0, r8
 8002f48:	47d0      	blx	sl
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d09d      	beq.n	8002e8a <_printf_i+0x15e>
 8002f4e:	3501      	adds	r5, #1
 8002f50:	68e3      	ldr	r3, [r4, #12]
 8002f52:	9903      	ldr	r1, [sp, #12]
 8002f54:	1a5b      	subs	r3, r3, r1
 8002f56:	42ab      	cmp	r3, r5
 8002f58:	dcf2      	bgt.n	8002f40 <_printf_i+0x214>
 8002f5a:	e7eb      	b.n	8002f34 <_printf_i+0x208>
 8002f5c:	2500      	movs	r5, #0
 8002f5e:	f104 0619 	add.w	r6, r4, #25
 8002f62:	e7f5      	b.n	8002f50 <_printf_i+0x224>
 8002f64:	0800360a 	.word	0x0800360a
 8002f68:	0800361b 	.word	0x0800361b

08002f6c <memmove>:
 8002f6c:	4288      	cmp	r0, r1
 8002f6e:	b510      	push	{r4, lr}
 8002f70:	eb01 0402 	add.w	r4, r1, r2
 8002f74:	d902      	bls.n	8002f7c <memmove+0x10>
 8002f76:	4284      	cmp	r4, r0
 8002f78:	4623      	mov	r3, r4
 8002f7a:	d807      	bhi.n	8002f8c <memmove+0x20>
 8002f7c:	1e43      	subs	r3, r0, #1
 8002f7e:	42a1      	cmp	r1, r4
 8002f80:	d008      	beq.n	8002f94 <memmove+0x28>
 8002f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f8a:	e7f8      	b.n	8002f7e <memmove+0x12>
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	4402      	add	r2, r0
 8002f90:	428a      	cmp	r2, r1
 8002f92:	d100      	bne.n	8002f96 <memmove+0x2a>
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f9e:	e7f7      	b.n	8002f90 <memmove+0x24>

08002fa0 <_sbrk_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	4d05      	ldr	r5, [pc, #20]	@ (8002fbc <_sbrk_r+0x1c>)
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	4608      	mov	r0, r1
 8002faa:	602b      	str	r3, [r5, #0]
 8002fac:	f7fd fe8e 	bl	8000ccc <_sbrk>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_sbrk_r+0x1a>
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_sbrk_r+0x1a>
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	200013d4 	.word	0x200013d4

08002fc0 <memchr>:
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	b510      	push	{r4, lr}
 8002fc4:	b2c9      	uxtb	r1, r1
 8002fc6:	4402      	add	r2, r0
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	d101      	bne.n	8002fd2 <memchr+0x12>
 8002fce:	2000      	movs	r0, #0
 8002fd0:	e003      	b.n	8002fda <memchr+0x1a>
 8002fd2:	7804      	ldrb	r4, [r0, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	428c      	cmp	r4, r1
 8002fd8:	d1f6      	bne.n	8002fc8 <memchr+0x8>
 8002fda:	bd10      	pop	{r4, pc}

08002fdc <_realloc_r>:
 8002fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe0:	4680      	mov	r8, r0
 8002fe2:	4615      	mov	r5, r2
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	b921      	cbnz	r1, 8002ff2 <_realloc_r+0x16>
 8002fe8:	4611      	mov	r1, r2
 8002fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fee:	f7ff bc47 	b.w	8002880 <_malloc_r>
 8002ff2:	b92a      	cbnz	r2, 8003000 <_realloc_r+0x24>
 8002ff4:	f7ff fbda 	bl	80027ac <_free_r>
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003000:	f000 f81a 	bl	8003038 <_malloc_usable_size_r>
 8003004:	4285      	cmp	r5, r0
 8003006:	4606      	mov	r6, r0
 8003008:	d802      	bhi.n	8003010 <_realloc_r+0x34>
 800300a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800300e:	d8f4      	bhi.n	8002ffa <_realloc_r+0x1e>
 8003010:	4629      	mov	r1, r5
 8003012:	4640      	mov	r0, r8
 8003014:	f7ff fc34 	bl	8002880 <_malloc_r>
 8003018:	4607      	mov	r7, r0
 800301a:	2800      	cmp	r0, #0
 800301c:	d0ec      	beq.n	8002ff8 <_realloc_r+0x1c>
 800301e:	42b5      	cmp	r5, r6
 8003020:	462a      	mov	r2, r5
 8003022:	4621      	mov	r1, r4
 8003024:	bf28      	it	cs
 8003026:	4632      	movcs	r2, r6
 8003028:	f7ff fbb2 	bl	8002790 <memcpy>
 800302c:	4621      	mov	r1, r4
 800302e:	4640      	mov	r0, r8
 8003030:	f7ff fbbc 	bl	80027ac <_free_r>
 8003034:	463c      	mov	r4, r7
 8003036:	e7e0      	b.n	8002ffa <_realloc_r+0x1e>

08003038 <_malloc_usable_size_r>:
 8003038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800303c:	1f18      	subs	r0, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	bfbc      	itt	lt
 8003042:	580b      	ldrlt	r3, [r1, r0]
 8003044:	18c0      	addlt	r0, r0, r3
 8003046:	4770      	bx	lr

08003048 <_init>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr

08003054 <_fini>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	bf00      	nop
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr
